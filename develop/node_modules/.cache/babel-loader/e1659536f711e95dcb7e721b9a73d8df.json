{"ast":null,"code":"import { firestore, initDoc } from \"../firebase-config\";\nimport firebase from \"firebase\";\nimport { defaultLogoFile, deletedAtribute, getGravatarURL, languageCode, parentsParameters, roleAdminPermissionDesignation, showToast, toastTypes, validatedAtribute } from \"../utils/general_utils\";\nimport { jsonParamsErrorMessage, importSucessMessage, provideRequiredFieldsMessage, installError, rolesFileErrorMessage_NewAssoc, rolesFileErrorMessage, installDefaultLogoError } from \"../utils/messages_strings\";\nimport { getAndSaveJSONparamsData, sendImportEmailToParent, uploadDefaultLogo, uploadNewLogo, uploadAssocDataFiles, removeAllInvalidFeedbacks, validZip, showZipWarning, installGotErrors, validEmail, showEmailWarning, saveRolesInDB, saveDefaultLogoURL } from \"./installation\";\nvar jsonErrorMessage = jsonParamsErrorMessage[languageCode];\nvar sucessImportMessage = importSucessMessage[languageCode];\nvar requiredFieldsMissingMessage = provideRequiredFieldsMessage[languageCode];\nvar rolesErrorMessage = rolesFileErrorMessage_NewAssoc[languageCode]; // -------------- person that installs --------------\n\nfunction createInstallerParent(nome, email, cargo) {\n  var docRef = firestore.collection(\"parents\");\n  var parentDoc = {};\n  parentDoc[deletedAtribute] = false;\n  parentDoc[parentsParameters.ADMIN[languageCode]] = true;\n  parentDoc[parentsParameters.ROLE[languageCode]] = cargo;\n  parentDoc[parentsParameters.CC[languageCode]] = \"\";\n  parentDoc[parentsParameters.FEES[languageCode]] = [];\n  parentDoc[parentsParameters.ZIPCODE[languageCode]] = \"\"; //parentDoc[parentsParameters.REGISTER_DATE[languageCode]] = new Date().toJSON().split(\"T\")[0]; // get date on format: 2015-03-25\n\n  parentDoc[parentsParameters.REGISTER_DATE[languageCode]] = new Date(); // adicionar array para educandos\n\n  parentDoc[parentsParameters.CHILDREN[languageCode]] = [];\n  parentDoc[parentsParameters.EMAIL[languageCode]] = email;\n  parentDoc[parentsParameters.CITY[languageCode]] = \"\";\n  parentDoc[parentsParameters.STREET[languageCode]] = \"\";\n  parentDoc[parentsParameters.NIF[languageCode]] = \"\";\n  parentDoc[parentsParameters.NAME[languageCode]] = nome;\n  parentDoc[parentsParameters.ASSOC_NUMBER[languageCode]] = \"1\"; // first member\n\n  parentDoc[parentsParameters.JOB[languageCode]] = \"\";\n  parentDoc[parentsParameters.PAYED_FEE[languageCode]] = true; // TODO: check this\n\n  parentDoc[parentsParameters.PHONE[languageCode]] = \"\";\n  parentDoc[validatedAtribute] = true; // imported parents are validated\n\n  parentDoc[\"blocked\"] = false; // imported parents are not blocked initially\n  // avatar\n\n  parentDoc[parentsParameters.PHOTO[languageCode]] = getGravatarURL(email);\n  var parentRef = docRef.doc(email); // email as document id\n\n  parentRef.set(parentDoc).then(function () {//console.log(\"EE e educandos guardados com sucesso.\");\n  }).catch(function (error) {\n    console.log(\"Erro: \" + error);\n    installGotErrors = false;\n  });\n} // ------------------------------------------------------------\n// PROCESS ROLES\n\n/*\r\n * function to process TEXT with roles for the association's members:\r\n *  read the file, get a list of roles from it and check if the\r\n *  role written in the form is a role from this TXT file\r\n * */\n\n\nfunction readAndCheckRolesFile(rolesFile, callback) {\n  var rolesReader = new FileReader();\n  var rolesFileString = \"NR\";\n\n  rolesReader.onloadend = function () {\n    rolesFileString = rolesReader.result;\n    var rolesFileCorrect = false; // control the correctness of roles file\n\n    try {\n      // try to parse the JSON file uploaded\n      var json = JSON.parse(rolesFileString);\n      validateRolesJSON(json, rolesFileString, callback);\n    } catch (e) {\n      // catch error if the TXT is improperly formatted, for example\n      rolesFileCorrect = false;\n      callback(rolesFileCorrect);\n    }\n  };\n\n  rolesReader.readAsText(rolesFile, \"UTF-8\");\n}\n\nfunction validateRolesJSON(json, rolesFileString, callback) {\n  var rolesFileCorrect = false;\n  var rolesNum = Object.keys(json).length; // if no roles provided, then do not accept the file\n\n  if (rolesNum === 0) {\n    throw \"No roles provided (roles file is an empty JSON)\";\n  }\n\n  for (var role in json) {\n    var roleDoc = json[role];\n    var roleDocKeys = Object.keys(roleDoc); // each role only has one permission (admin - yes or no)\n\n    if (roleDocKeys.length !== 1) {\n      throw \"Less or more than one permission provided for role <\" + role + \">\";\n    }\n\n    var permission = roleDoc[roleAdminPermissionDesignation]; // if no value for admin permission, file is invalid\n\n    if (permission == null) {\n      throw \"No admin permission for role <\" + role + \">\";\n    } // admin permission only has two values: true or false\n\n\n    if (permission !== \"false\" && permission !== \"true\") {\n      throw \"Invalid value for admin permission for role <\" + role + \">\";\n    }\n  } // if there's no information in the file, it's invalid\n\n\n  if (rolesFileString.trim().length === 0) {\n    throw \"Too few data in ROLES file to process\";\n  } // get roles from JSON as an array, removing spaces around\n\n\n  var rolesList = Object.keys(json).map(function (r) {\n    return r.trim();\n  });\n  var duplicateFilteredRolesList = [];\n\n  for (var i in rolesList) {\n    var currentRole = rolesList[i];\n\n    if (!duplicateFilteredRolesList.includes(currentRole)) {\n      duplicateFilteredRolesList.push(currentRole);\n    }\n  }\n\n  if (rolesList.length !== duplicateFilteredRolesList.length) {\n    throw \"There are duplicated roles in JSON\";\n  }\n\n  var cargoValue = document.getElementById(\"configAssocAdminCargo\").value;\n\n  if (parentsRolesAreValid(rolesList, cargoValue)) {\n    rolesFileCorrect = true;\n    saveRolesInDB(rolesList, json);\n    callback(rolesFileCorrect);\n  } else {\n    rolesFileCorrect = false;\n    callback(rolesFileCorrect);\n  }\n}\n\nfunction parentsRolesAreValid(rolesArray, roleInInput) {\n  var parentsRolesValid = true;\n\n  if (!rolesArray.includes(roleInInput.trim())) {\n    console.log(\"json não inclui <\" + roleInInput.trim() + \">\");\n    parentsRolesValid = false;\n  }\n\n  return parentsRolesValid;\n}\n\nfunction getFormElementsAndValues() {\n  var all_labels = Array.from(document.querySelectorAll(\"label\"));\n  var all_inputs = Array.from(document.querySelectorAll(\"input\"));\n  all_inputs.push(document.querySelector(\"#configAssocDescricao\")); // add description textarea\n\n  var submittedInputs = {};\n\n  for (var i = 0; i < all_labels.length; i++) {\n    for (var j = 0; j < all_inputs.length; j++) {\n      var label = all_labels[i];\n      var input = all_inputs[j];\n      var labelText = label.innerText;\n      var labelHtmlFor = label.htmlFor;\n      var inputId = input.id;\n\n      if (labelHtmlFor === inputId) {\n        if (labelText.includes(\"(\") || labelText.includes(\"/\")) {\n          if (labelText.trim() === \"Valor da Quota (€)\") {\n            labelText = \"Quota\";\n          } else {\n            labelText = labelText.split(\" \")[0];\n          }\n        }\n\n        submittedInputs[labelText] = input;\n        break;\n      }\n    }\n  }\n\n  return submittedInputs;\n}\n\nfunction install() {\n  removeAllInvalidFeedbacks();\n  var requiredFieldsProvided = true;\n  var policyCheckboxChecked = true;\n  var inputsInfo = getFormElementsAndValues(); // { \"labelText\" : input }\n\n  for (var label in inputsInfo) {\n    var input = inputsInfo[label];\n\n    if (input.value === \"\" && input.required) {\n      input.classList.add(\"is-invalid\");\n      document.querySelector(\"#\" + input.id + \"Feedback\").style.display = \"block\";\n      requiredFieldsProvided = false; // if there's an empty required input, no submit\n      //break;\n    }\n  } // verify the checkBox\n\n\n  var policyCheckbox = document.querySelector(\"input[type=checkbox]\");\n\n  if (!policyCheckbox.checked) {\n    policyCheckboxChecked = false;\n    document.querySelector(\"#\" + policyCheckbox.id + \"Feedback\").style.display = \"block\";\n  }\n\n  if (requiredFieldsProvided && policyCheckboxChecked) {\n    // validate the zip code for the country\n    var zipValue = document.getElementById(\"configAssocZip\").value;\n\n    if (!validZip(zipValue)) {\n      showZipWarning(\"configAssocZip\");\n      return;\n    }\n\n    var emailValue = document.getElementById(\"configAssocEmail\").value;\n\n    if (!validEmail(emailValue)) {\n      showEmailWarning(\"configAssocEmail\");\n      return;\n    }\n\n    var adminEmailValue = document.getElementById(\"configAdminEmail\").value;\n\n    if (!validEmail(adminEmailValue)) {\n      showEmailWarning(\"configAdminEmail\");\n      return;\n    } // read files and save their data\n\n\n    var paramsJSONfile = document.getElementById(\"configAssocNewParams\").files[0];\n    var rolesFile = document.getElementById(\"configAssocCargos\").files[0];\n    getAndSaveJSONparamsData(paramsJSONfile, function (jsonCorrect) {\n      if (!jsonCorrect) {\n        // if there's an error with JSON, not allow to submit the form\n        var paramsInput = document.getElementById(\"configAssocNewParams\");\n        paramsInput.classList.add(\"is-invalid\");\n        document.querySelector(\"#\" + paramsInput.id + \"Feedback\").style.display = \"block\";\n        paramsInput.value = \"\";\n        showToast(jsonErrorMessage, 15000, toastTypes.ERROR);\n      } else {\n        readAndCheckRolesFile(rolesFile, function (rolesCorrect) {\n          if (!rolesCorrect) {\n            // reset all import files' inputs that potentially lead to error\n            var rolesFileInput = document.getElementById(\"configAssocCargos\");\n            rolesFileInput.classList.add(\"is-invalid\");\n            document.querySelector(\"#\" + rolesFileInput.id + \"Feedback\").style.display = \"block\"; //paramsInput.value = \"\";\n\n            var roleInput = document.getElementById(\"configAssocAdminCargo\");\n            roleInput.classList.add(\"is-invalid\");\n            document.querySelector(\"#\" + roleInput.id + \"Feedback\").style.display = \"block\";\n            showToast(rolesErrorMessage, 15000, toastTypes.ERROR);\n          } else {\n            // uploads after files are validated\n            uploadAssocDataFiles(\"configAssocNewParams\");\n            var fileArray = document.getElementById(\"configAssocLogo\").files;\n\n            if (fileArray.length !== 0) {\n              var file = fileArray[0]; // just one logo is uploaded\n\n              var uploadTask = uploadNewLogo(file);\n              uploadTask.on(\"state_changed\", function (snapshot) {\n                // Observe state change events such as progress, pause, and resume\n                // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n                var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n                console.log(\"Upload \" + progress + \"% completed\");\n\n                switch (snapshot.state) {\n                  case firebase.storage.TaskState.PAUSED:\n                    // or 'paused'\n                    console.log(\"Upload on pause\");\n                    break;\n\n                  case firebase.storage.TaskState.RUNNING:\n                    // or 'running'\n                    console.log(\"Upload in progress\");\n                    break;\n                }\n              }, function (error) {\n                console.log(\"Upload failed: \" + error);\n                installGotErrors = true;\n              }, function () {\n                // Handle successful uploads on complete\n                // get the download URL\n                uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n                  continueInstallation(inputsInfo, downloadURL);\n                });\n              });\n            } else if (fileArray.length === 0) {\n              // try to upload the file to firestore by its name\n              var defaultLogoTask = uploadDefaultLogo();\n              defaultLogoTask.then(function (downloadURL) {\n                saveDefaultLogoURL(downloadURL);\n                continueInstallation(inputsInfo, downloadURL);\n              }).catch(function () {\n                // alternatively, use asset file directly\n                if (defaultLogoFile != null) {\n                  continueInstallation(inputsInfo, defaultLogoFile);\n                } else {\n                  showToast(installDefaultLogoError[languageCode], 20000, toastTypes.ERROR);\n                }\n              });\n            }\n          }\n        });\n      }\n    });\n  } else showToast(requiredFieldsMissingMessage, 5000, toastTypes.ERROR);\n}\n\nfunction continueInstallation(inputsInfo, logoURL) {\n  if (installGotErrors) {\n    showToast(installError[languageCode], 5000, toastTypes.ERROR);\n    installGotErrors = false;\n    return;\n  }\n\n  var setupDataDoc = function setupDataDoc() {\n    var temp = {};\n\n    for (var label in inputsInfo) {\n      // default logo, when no one is provided\n      if (label === \"Logótipo\") {\n        temp[label] = logoURL;\n        continue;\n      }\n\n      temp[label] = inputsInfo[label].value;\n    }\n\n    temp[\"DeleteRegistosSemPagar\"] = \"7\";\n    return temp;\n  };\n\n  var dataDoc = setupDataDoc(); // {\"label\" : \"input value\"}\n\n  var installerNome = dataDoc[\"O seu nome\"];\n  var installerEmail = dataDoc[\"O seu email\"];\n  var installerCargo = dataDoc[\"Cargo\"]; // name, email and role of who is installing to create that parent doc\n\n  createInstallerParent(installerNome, installerEmail, installerCargo);\n  console.log(\"dataDoc before install -> \" + JSON.stringify(dataDoc));\n  var docRef = firestore.doc(\"initialConfigs/parameters\");\n  docRef.set(dataDoc).then(function () {\n    // ------------- installation control doc\n    var doc = {\n      installation: true\n    };\n    initDoc.set(doc).then(function () {\n      sendImportEmailToParent(installerNome, installerEmail).then();\n      alert(sucessImportMessage); // alert to block the page\n      //showToast(sucessImportMessage, 5000, toastTypes.SUCCESS);\n\n      window.location.href = \"/\";\n    }).catch(function (error) {\n      alert(\"Erro: \" + error);\n    });\n  }).catch(function (error) {\n    alert(\"Erro: \" + error);\n  });\n}\n\nexport { install, getGravatarURL };","map":{"version":3,"sources":["C:/Users/User/Desktop/Ambiente de Trabalho/Universidade/Ano 3/Semestre 2/PI/Projeto/repos/pi-assoc-pais/develop/src/firebase_scripts/installation_new_assoc.js"],"names":["firestore","initDoc","firebase","defaultLogoFile","deletedAtribute","getGravatarURL","languageCode","parentsParameters","roleAdminPermissionDesignation","showToast","toastTypes","validatedAtribute","jsonParamsErrorMessage","importSucessMessage","provideRequiredFieldsMessage","installError","rolesFileErrorMessage_NewAssoc","rolesFileErrorMessage","installDefaultLogoError","getAndSaveJSONparamsData","sendImportEmailToParent","uploadDefaultLogo","uploadNewLogo","uploadAssocDataFiles","removeAllInvalidFeedbacks","validZip","showZipWarning","installGotErrors","validEmail","showEmailWarning","saveRolesInDB","saveDefaultLogoURL","jsonErrorMessage","sucessImportMessage","requiredFieldsMissingMessage","rolesErrorMessage","createInstallerParent","nome","email","cargo","docRef","collection","parentDoc","ADMIN","ROLE","CC","FEES","ZIPCODE","REGISTER_DATE","Date","CHILDREN","EMAIL","CITY","STREET","NIF","NAME","ASSOC_NUMBER","JOB","PAYED_FEE","PHONE","PHOTO","parentRef","doc","set","then","catch","error","console","log","readAndCheckRolesFile","rolesFile","callback","rolesReader","FileReader","rolesFileString","onloadend","result","rolesFileCorrect","json","JSON","parse","validateRolesJSON","e","readAsText","rolesNum","Object","keys","length","role","roleDoc","roleDocKeys","permission","trim","rolesList","map","r","duplicateFilteredRolesList","i","currentRole","includes","push","cargoValue","document","getElementById","value","parentsRolesAreValid","rolesArray","roleInInput","parentsRolesValid","getFormElementsAndValues","all_labels","Array","from","querySelectorAll","all_inputs","querySelector","submittedInputs","j","label","input","labelText","innerText","labelHtmlFor","htmlFor","inputId","id","split","install","requiredFieldsProvided","policyCheckboxChecked","inputsInfo","required","classList","add","style","display","policyCheckbox","checked","zipValue","emailValue","adminEmailValue","paramsJSONfile","files","jsonCorrect","paramsInput","ERROR","rolesCorrect","rolesFileInput","roleInput","fileArray","file","uploadTask","on","snapshot","progress","bytesTransferred","totalBytes","state","storage","TaskState","PAUSED","RUNNING","ref","getDownloadURL","downloadURL","continueInstallation","defaultLogoTask","logoURL","setupDataDoc","temp","dataDoc","installerNome","installerEmail","installerCargo","stringify","installation","alert","window","location","href"],"mappings":"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","sourcesContent":["import {\r\n  firestore,\r\n  initDoc,\r\n} from \"../firebase-config\";\r\nimport firebase from \"firebase\";\r\n\r\nimport {\r\n  defaultLogoFile,\r\n  deletedAtribute,\r\n  getGravatarURL,\r\n  languageCode,\r\n  parentsParameters,\r\n  roleAdminPermissionDesignation,\r\n  showToast,\r\n  toastTypes,\r\n  validatedAtribute\r\n} from \"../utils/general_utils\";\r\nimport {\r\n  jsonParamsErrorMessage,\r\n  importSucessMessage,\r\n  provideRequiredFieldsMessage,\r\n  installError,\r\n  rolesFileErrorMessage_NewAssoc,\r\n  rolesFileErrorMessage,\r\n  installDefaultLogoError\r\n} from \"../utils/messages_strings\";\r\nimport {\r\n  getAndSaveJSONparamsData,\r\n  sendImportEmailToParent,\r\n  uploadDefaultLogo,\r\n  uploadNewLogo,\r\n  uploadAssocDataFiles,\r\n  removeAllInvalidFeedbacks,\r\n  validZip,\r\n  showZipWarning,\r\n  installGotErrors,\r\n  validEmail,\r\n  showEmailWarning,\r\n  saveRolesInDB, saveDefaultLogoURL\r\n} from \"./installation\";\r\n\r\n\r\nconst jsonErrorMessage = jsonParamsErrorMessage[languageCode];\r\nconst sucessImportMessage = importSucessMessage[languageCode];\r\nconst requiredFieldsMissingMessage = provideRequiredFieldsMessage[languageCode];\r\nconst rolesErrorMessage = rolesFileErrorMessage_NewAssoc[languageCode];\r\n\r\n\r\n\r\n\r\n// -------------- person that installs --------------\r\n\r\n\r\nfunction createInstallerParent(nome, email, cargo) {\r\n  const docRef = firestore.collection(\"parents\");\r\n  let parentDoc = {};\r\n  parentDoc[deletedAtribute] = false;\r\n  parentDoc[parentsParameters.ADMIN[languageCode]] = true;\r\n  parentDoc[parentsParameters.ROLE[languageCode]] = cargo;\r\n  parentDoc[parentsParameters.CC[languageCode]] = \"\";\r\n  parentDoc[parentsParameters.FEES[languageCode]] = [];\r\n  parentDoc[parentsParameters.ZIPCODE[languageCode]] = \"\";\r\n  //parentDoc[parentsParameters.REGISTER_DATE[languageCode]] = new Date().toJSON().split(\"T\")[0]; // get date on format: 2015-03-25\r\n  parentDoc[parentsParameters.REGISTER_DATE[languageCode]] = new Date();\r\n  // adicionar array para educandos\r\n  parentDoc[parentsParameters.CHILDREN[languageCode]] = [];\r\n  parentDoc[parentsParameters.EMAIL[languageCode]] = email;\r\n  parentDoc[parentsParameters.CITY[languageCode]] = \"\";\r\n  parentDoc[parentsParameters.STREET[languageCode]] = \"\";\r\n  parentDoc[parentsParameters.NIF[languageCode]] = \"\";\r\n  parentDoc[parentsParameters.NAME[languageCode]] = nome;\r\n  parentDoc[parentsParameters.ASSOC_NUMBER[languageCode]] = \"1\"; // first member\r\n  parentDoc[parentsParameters.JOB[languageCode]] = \"\";\r\n  parentDoc[parentsParameters.PAYED_FEE[languageCode]] = true; // TODO: check this\r\n  parentDoc[parentsParameters.PHONE[languageCode]] = \"\";\r\n  parentDoc[validatedAtribute] = true; // imported parents are validated\r\n  parentDoc[\"blocked\"] = false; // imported parents are not blocked initially\r\n  // avatar\r\n  parentDoc[parentsParameters.PHOTO[languageCode]] = getGravatarURL(email);\r\n\r\n  const parentRef = docRef.doc(email); // email as document id\r\n\r\n  parentRef\r\n    .set(parentDoc)\r\n    .then(function () {\r\n      //console.log(\"EE e educandos guardados com sucesso.\");\r\n    })\r\n    .catch(function (error) {\r\n      console.log(\"Erro: \" + error);\r\n      installGotErrors = false;\r\n    });\r\n}\r\n\r\n// ------------------------------------------------------------\r\n\r\n// PROCESS ROLES\r\n\r\n/*\r\n * function to process TEXT with roles for the association's members:\r\n *  read the file, get a list of roles from it and check if the\r\n *  role written in the form is a role from this TXT file\r\n * */\r\nfunction readAndCheckRolesFile(rolesFile, callback) {\r\n  const rolesReader = new FileReader();\r\n  let rolesFileString = \"NR\";\r\n\r\n  rolesReader.onloadend = function () {\r\n    rolesFileString = rolesReader.result;\r\n    let rolesFileCorrect = false; // control the correctness of roles file\r\n    try{\r\n      // try to parse the JSON file uploaded\r\n      const json = JSON.parse(rolesFileString);\r\n      validateRolesJSON(json, rolesFileString, callback);\r\n    }\r\n    catch (e) {\r\n      // catch error if the TXT is improperly formatted, for example\r\n      rolesFileCorrect = false;\r\n      callback(rolesFileCorrect);\r\n    }\r\n  };\r\n  rolesReader.readAsText(rolesFile, \"UTF-8\");\r\n}\r\n\r\nfunction validateRolesJSON(json, rolesFileString, callback) {\r\n  let rolesFileCorrect = false;\r\n  const rolesNum = Object.keys(json).length;\r\n  // if no roles provided, then do not accept the file\r\n  if(rolesNum===0){\r\n    throw \"No roles provided (roles file is an empty JSON)\";\r\n  }\r\n\r\n  for(let role in json){\r\n    const roleDoc = json[role];\r\n    const roleDocKeys = Object.keys(roleDoc);\r\n    // each role only has one permission (admin - yes or no)\r\n    if(roleDocKeys.length!==1){\r\n      throw \"Less or more than one permission provided for role <\" + role + \">\";\r\n    }\r\n    let permission = roleDoc[roleAdminPermissionDesignation];\r\n\r\n    // if no value for admin permission, file is invalid\r\n    if(permission==null){\r\n      throw \"No admin permission for role <\" + role + \">\";\r\n    }\r\n\r\n    // admin permission only has two values: true or false\r\n    if(permission!==\"false\" && permission!==\"true\"){\r\n      throw \"Invalid value for admin permission for role <\" + role + \">\";\r\n    }\r\n  }\r\n\r\n  // if there's no information in the file, it's invalid\r\n  if(rolesFileString.trim().length===0){\r\n    throw \"Too few data in ROLES file to process\";\r\n  }\r\n\r\n  // get roles from JSON as an array, removing spaces around\r\n  const rolesList = Object.keys(json).map(r => r.trim());\r\n\r\n  let duplicateFilteredRolesList = [];\r\n\r\n  for(let i in rolesList){\r\n    const currentRole = rolesList[i];\r\n    if(!duplicateFilteredRolesList.includes(currentRole)){\r\n      duplicateFilteredRolesList.push(currentRole);\r\n    }\r\n  }\r\n\r\n  if(rolesList.length!==duplicateFilteredRolesList.length){\r\n    throw \"There are duplicated roles in JSON\";\r\n  }\r\n\r\n  const cargoValue = document.getElementById(\"configAssocAdminCargo\").value;\r\n\r\n  if(parentsRolesAreValid(rolesList, cargoValue)){\r\n    rolesFileCorrect = true;\r\n    saveRolesInDB(rolesList, json);\r\n    callback(rolesFileCorrect);\r\n  }\r\n  else{\r\n    rolesFileCorrect = false;\r\n    callback(rolesFileCorrect);\r\n  }\r\n}\r\n\r\nfunction parentsRolesAreValid(rolesArray, roleInInput){\r\n  let parentsRolesValid = true;\r\n  if(!rolesArray.includes(roleInInput.trim())){\r\n    console.log(\"json não inclui <\" + roleInInput.trim() + \">\");\r\n    parentsRolesValid = false;\r\n  }\r\n\r\n  return parentsRolesValid;\r\n}\r\n\r\n\r\nfunction getFormElementsAndValues() {\r\n  const all_labels = Array.from(document.querySelectorAll(\"label\"));\r\n  let all_inputs = Array.from(document.querySelectorAll(\"input\"));\r\n  all_inputs.push(document.querySelector(\"#configAssocDescricao\")); // add description textarea\r\n  let submittedInputs = {};\r\n\r\n  for (let i = 0; i < all_labels.length; i++) {\r\n    for (let j = 0; j < all_inputs.length; j++) {\r\n      const label = all_labels[i];\r\n      const input = all_inputs[j];\r\n\r\n      let labelText = label.innerText;\r\n      let labelHtmlFor = label.htmlFor;\r\n      let inputId = input.id;\r\n\r\n      if (labelHtmlFor === inputId) {\r\n        if (labelText.includes(\"(\") || labelText.includes(\"/\")) {\r\n          if(labelText.trim()===\"Valor da Quota (€)\"){\r\n            labelText = \"Quota\";\r\n          }\r\n          else{\r\n            labelText = labelText.split(\" \")[0];\r\n          }\r\n        }\r\n        submittedInputs[labelText] = input;\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return submittedInputs;\r\n}\r\n\r\nfunction install() {\r\n  removeAllInvalidFeedbacks();\r\n  let requiredFieldsProvided = true;\r\n  let policyCheckboxChecked = true;\r\n  const inputsInfo = getFormElementsAndValues(); // { \"labelText\" : input }\r\n\r\n  for (const label in inputsInfo) {\r\n    let input = inputsInfo[label];\r\n    if (input.value === \"\" && input.required) {\r\n      input.classList.add(\"is-invalid\");\r\n      document.querySelector(\"#\" + input.id + \"Feedback\").style.display =\r\n        \"block\";\r\n      requiredFieldsProvided = false; // if there's an empty required input, no submit\r\n      //break;\r\n    }\r\n  }\r\n\r\n  // verify the checkBox\r\n  const policyCheckbox = document.querySelector(\"input[type=checkbox]\");\r\n  if (!policyCheckbox.checked) {\r\n    policyCheckboxChecked = false;\r\n    document.querySelector(\"#\" + policyCheckbox.id + \"Feedback\").style.display =\r\n      \"block\";\r\n  }\r\n\r\n  if (requiredFieldsProvided && policyCheckboxChecked) {\r\n\r\n    // validate the zip code for the country\r\n    const zipValue = document.getElementById(\"configAssocZip\").value;\r\n    if(!validZip(zipValue)){\r\n      showZipWarning(\"configAssocZip\");\r\n      return;\r\n    }\r\n\r\n    const emailValue = document.getElementById(\"configAssocEmail\").value;\r\n    if(!validEmail(emailValue)){\r\n      showEmailWarning(\"configAssocEmail\");\r\n      return;\r\n    }\r\n\r\n    const adminEmailValue = document.getElementById(\"configAdminEmail\").value;\r\n    if(!validEmail(adminEmailValue)){\r\n      showEmailWarning(\"configAdminEmail\");\r\n      return;\r\n    }\r\n\r\n    // read files and save their data\r\n    const paramsJSONfile = document.getElementById(\"configAssocNewParams\").files[0];\r\n    const rolesFile = document.getElementById(\"configAssocCargos\").files[0];\r\n\r\n    getAndSaveJSONparamsData(paramsJSONfile, function (jsonCorrect) {\r\n      if(!jsonCorrect){\r\n        // if there's an error with JSON, not allow to submit the form\r\n        const paramsInput = document.getElementById(\"configAssocNewParams\");\r\n        paramsInput.classList.add(\"is-invalid\");\r\n        document.querySelector(\"#\" + paramsInput.id + \"Feedback\").style.display =\r\n          \"block\";\r\n        paramsInput.value = \"\";\r\n        showToast(jsonErrorMessage, 15000, toastTypes.ERROR);\r\n      }\r\n      else{\r\n\r\n        readAndCheckRolesFile(rolesFile, function (rolesCorrect) {\r\n          if(!rolesCorrect){\r\n            // reset all import files' inputs that potentially lead to error\r\n            const rolesFileInput = document.getElementById(\"configAssocCargos\");\r\n            rolesFileInput.classList.add(\"is-invalid\");\r\n            document.querySelector(\"#\" + rolesFileInput.id + \"Feedback\").style.display =\r\n              \"block\";\r\n            //paramsInput.value = \"\";\r\n\r\n            const roleInput = document.getElementById(\"configAssocAdminCargo\");\r\n            roleInput.classList.add(\"is-invalid\");\r\n            document.querySelector(\"#\" + roleInput.id + \"Feedback\").style.display =\r\n              \"block\";\r\n            showToast(rolesErrorMessage, 15000, toastTypes.ERROR);\r\n\r\n          }\r\n          else{\r\n            // uploads after files are validated\r\n            uploadAssocDataFiles(\"configAssocNewParams\");\r\n\r\n            const fileArray = document.getElementById(\"configAssocLogo\").files;\r\n\r\n            if (fileArray.length !== 0) {\r\n              const file = fileArray[0]; // just one logo is uploaded\r\n              const uploadTask = uploadNewLogo(file);\r\n              uploadTask.on(\r\n                \"state_changed\",\r\n                function (snapshot) {\r\n                  // Observe state change events such as progress, pause, and resume\r\n                  // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n                  var progress =\r\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                  console.log(\"Upload \" + progress + \"% completed\");\r\n                  switch (snapshot.state) {\r\n                    case firebase.storage.TaskState.PAUSED: // or 'paused'\r\n                      console.log(\"Upload on pause\");\r\n                      break;\r\n                    case firebase.storage.TaskState.RUNNING: // or 'running'\r\n                      console.log(\"Upload in progress\");\r\n                      break;\r\n                  }\r\n                },\r\n                function (error) {\r\n                  console.log(\"Upload failed: \" + error);\r\n                  installGotErrors = true;\r\n                },\r\n                function () {\r\n                  // Handle successful uploads on complete\r\n                  // get the download URL\r\n                  uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n                    continueInstallation(inputsInfo, downloadURL);\r\n                  });\r\n                }\r\n              );\r\n            } else if (fileArray.length === 0) {\r\n              // try to upload the file to firestore by its name\r\n              const defaultLogoTask = uploadDefaultLogo();\r\n              defaultLogoTask\r\n                .then(function (downloadURL) {\r\n                  saveDefaultLogoURL(downloadURL);\r\n                  continueInstallation(inputsInfo, downloadURL);\r\n              }).catch(() => {\r\n                // alternatively, use asset file directly\r\n                if(defaultLogoFile!=null){\r\n                  continueInstallation(inputsInfo, defaultLogoFile);\r\n                }\r\n                else{\r\n                  showToast(installDefaultLogoError[languageCode], 20000, toastTypes.ERROR);\r\n                }\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n    });\r\n\r\n  } else showToast(requiredFieldsMissingMessage, 5000, toastTypes.ERROR);\r\n}\r\n\r\nfunction continueInstallation(inputsInfo, logoURL) {\r\n  if(installGotErrors){\r\n    showToast(installError[languageCode], 5000, toastTypes.ERROR);\r\n    installGotErrors = false;\r\n    return;\r\n  }\r\n\r\n  const setupDataDoc = () => {\r\n    let temp = {};\r\n    for (const label in inputsInfo) {\r\n      // default logo, when no one is provided\r\n      if(label===\"Logótipo\"){\r\n        temp[label] = logoURL;\r\n        continue;\r\n      }\r\n      temp[label] = inputsInfo[label].value;\r\n    }\r\n\r\n    temp[\"DeleteRegistosSemPagar\"] = \"7\";\r\n\r\n    return temp;\r\n  };\r\n\r\n  const dataDoc = setupDataDoc(); // {\"label\" : \"input value\"}\r\n  const installerNome = dataDoc[\"O seu nome\"];\r\n  const installerEmail = dataDoc[\"O seu email\"];\r\n  const installerCargo = dataDoc[\"Cargo\"];\r\n  // name, email and role of who is installing to create that parent doc\r\n  createInstallerParent(installerNome, installerEmail, installerCargo);\r\n  console.log(\"dataDoc before install -> \" + JSON.stringify(dataDoc));\r\n\r\n  const docRef = firestore.doc(\"initialConfigs/parameters\");\r\n\r\n  docRef\r\n    .set(dataDoc)\r\n    .then(function () {\r\n      // ------------- installation control doc\r\n      const doc = {\r\n        installation: true,\r\n      };\r\n\r\n      initDoc\r\n        .set(doc)\r\n        .then(function () {\r\n          sendImportEmailToParent(installerNome, installerEmail).then();\r\n          alert(sucessImportMessage); // alert to block the page\r\n          //showToast(sucessImportMessage, 5000, toastTypes.SUCCESS);\r\n          window.location.href = \"/\";\r\n        })\r\n        .catch(function (error) {\r\n          alert(\"Erro: \" + error);\r\n        });\r\n    })\r\n    .catch(function (error) {\r\n      alert(\"Erro: \" + error);\r\n    });\r\n\r\n}\r\nexport { install, getGravatarURL };\r\n"]},"metadata":{},"sourceType":"module"}