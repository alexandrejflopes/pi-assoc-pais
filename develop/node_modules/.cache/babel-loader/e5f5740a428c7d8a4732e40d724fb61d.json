{"ast":null,"code":"/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule Dispatcher\r\n * \r\n * @preventMunge\r\n */\n'use strict';\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError('Cannot call a class as a function');\n  }\n}\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar _prefix = 'ID_';\n/**\r\n * Dispatcher is used to broadcast payloads to registered callbacks. This is\r\n * different from generic pub-sub systems in two ways:\r\n *\r\n *   1) Callbacks are not subscribed to particular events. Every payload is\r\n *      dispatched to every registered callback.\r\n *   2) Callbacks can be deferred in whole or part until other callbacks have\r\n *      been executed.\r\n *\r\n * For example, consider this hypothetical flight destination form, which\r\n * selects a default city when a country is selected:\r\n *\r\n *   var flightDispatcher = new Dispatcher();\r\n *\r\n *   // Keeps track of which country is selected\r\n *   var CountryStore = {country: null};\r\n *\r\n *   // Keeps track of which city is selected\r\n *   var CityStore = {city: null};\r\n *\r\n *   // Keeps track of the base flight price of the selected city\r\n *   var FlightPriceStore = {price: null}\r\n *\r\n * When a user changes the selected city, we dispatch the payload:\r\n *\r\n *   flightDispatcher.dispatch({\r\n *     actionType: 'city-update',\r\n *     selectedCity: 'paris'\r\n *   });\r\n *\r\n * This payload is digested by `CityStore`:\r\n *\r\n *   flightDispatcher.register(function(payload) {\r\n *     if (payload.actionType === 'city-update') {\r\n *       CityStore.city = payload.selectedCity;\r\n *     }\r\n *   });\r\n *\r\n * When the user selects a country, we dispatch the payload:\r\n *\r\n *   flightDispatcher.dispatch({\r\n *     actionType: 'country-update',\r\n *     selectedCountry: 'australia'\r\n *   });\r\n *\r\n * This payload is digested by both stores:\r\n *\r\n *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {\r\n *     if (payload.actionType === 'country-update') {\r\n *       CountryStore.country = payload.selectedCountry;\r\n *     }\r\n *   });\r\n *\r\n * When the callback to update `CountryStore` is registered, we save a reference\r\n * to the returned token. Using this token with `waitFor()`, we can guarantee\r\n * that `CountryStore` is updated before the callback that updates `CityStore`\r\n * needs to query its data.\r\n *\r\n *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {\r\n *     if (payload.actionType === 'country-update') {\r\n *       // `CountryStore.country` may not be updated.\r\n *       flightDispatcher.waitFor([CountryStore.dispatchToken]);\r\n *       // `CountryStore.country` is now guaranteed to be updated.\r\n *\r\n *       // Select the default city for the new country\r\n *       CityStore.city = getDefaultCityForCountry(CountryStore.country);\r\n *     }\r\n *   });\r\n *\r\n * The usage of `waitFor()` can be chained, for example:\r\n *\r\n *   FlightPriceStore.dispatchToken =\r\n *     flightDispatcher.register(function(payload) {\r\n *       switch (payload.actionType) {\r\n *         case 'country-update':\r\n *         case 'city-update':\r\n *           flightDispatcher.waitFor([CityStore.dispatchToken]);\r\n *           FlightPriceStore.price =\r\n *             getFlightPriceStore(CountryStore.country, CityStore.city);\r\n *           break;\r\n *     }\r\n *   });\r\n *\r\n * The `country-update` payload will be guaranteed to invoke the stores'\r\n * registered callbacks in order: `CountryStore`, `CityStore`, then\r\n * `FlightPriceStore`.\r\n */\n\nvar Dispatcher = function () {\n  function Dispatcher() {\n    _classCallCheck(this, Dispatcher);\n\n    this._callbacks = {};\n    this._isDispatching = false;\n    this._isHandled = {};\n    this._isPending = {};\n    this._lastID = 1;\n  }\n  /**\r\n   * Registers a callback to be invoked with every dispatched payload. Returns\r\n   * a token that can be used with `waitFor()`.\r\n   */\n\n\n  Dispatcher.prototype.register = function register(callback) {\n    var id = _prefix + this._lastID++;\n    this._callbacks[id] = callback;\n    return id;\n  };\n  /**\r\n   * Removes a callback based on its token.\r\n   */\n\n\n  Dispatcher.prototype.unregister = function unregister(id) {\n    !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;\n    delete this._callbacks[id];\n  };\n  /**\r\n   * Waits for the callbacks specified to be invoked before continuing execution\r\n   * of the current callback. This method should only be used by a callback in\r\n   * response to a dispatched payload.\r\n   */\n\n\n  Dispatcher.prototype.waitFor = function waitFor(ids) {\n    !this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : undefined;\n\n    for (var ii = 0; ii < ids.length; ii++) {\n      var id = ids[ii];\n\n      if (this._isPending[id]) {\n        !this._isHandled[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : undefined;\n        continue;\n      }\n\n      !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;\n\n      this._invokeCallback(id);\n    }\n  };\n  /**\r\n   * Dispatches a payload to all registered callbacks.\r\n   */\n\n\n  Dispatcher.prototype.dispatch = function dispatch(payload) {\n    !!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;\n\n    this._startDispatching(payload);\n\n    try {\n      for (var id in this._callbacks) {\n        if (this._isPending[id]) {\n          continue;\n        }\n\n        this._invokeCallback(id);\n      }\n    } finally {\n      this._stopDispatching();\n    }\n  };\n  /**\r\n   * Is this Dispatcher currently dispatching.\r\n   */\n\n\n  Dispatcher.prototype.isDispatching = function isDispatching() {\n    return this._isDispatching;\n  };\n  /**\r\n   * Call the callback stored with the given id. Also do some internal\r\n   * bookkeeping.\r\n   *\r\n   * @internal\r\n   */\n\n\n  Dispatcher.prototype._invokeCallback = function _invokeCallback(id) {\n    this._isPending[id] = true;\n\n    this._callbacks[id](this._pendingPayload);\n\n    this._isHandled[id] = true;\n  };\n  /**\r\n   * Set up bookkeeping needed when dispatching.\r\n   *\r\n   * @internal\r\n   */\n\n\n  Dispatcher.prototype._startDispatching = function _startDispatching(payload) {\n    for (var id in this._callbacks) {\n      this._isPending[id] = false;\n      this._isHandled[id] = false;\n    }\n\n    this._pendingPayload = payload;\n    this._isDispatching = true;\n  };\n  /**\r\n   * Clear bookkeeping used for dispatching.\r\n   *\r\n   * @internal\r\n   */\n\n\n  Dispatcher.prototype._stopDispatching = function _stopDispatching() {\n    delete this._pendingPayload;\n    this._isDispatching = false;\n  };\n\n  return Dispatcher;\n}();\n\nmodule.exports = Dispatcher;","map":{"version":3,"sources":["C:/Users/User/Desktop/Ambiente de Trabalho/Universidade/Ano 3/Semestre 2/PI/Projeto/repos/pi-assoc-pais/develop/node_modules/flux/lib/Dispatcher.js"],"names":["exports","__esModule","_classCallCheck","instance","Constructor","TypeError","invariant","require","_prefix","Dispatcher","_callbacks","_isDispatching","_isHandled","_isPending","_lastID","prototype","register","callback","id","unregister","process","env","NODE_ENV","undefined","waitFor","ids","ii","length","_invokeCallback","dispatch","payload","_startDispatching","_stopDispatching","isDispatching","_pendingPayload","module"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule Dispatcher\r\n * \r\n * @preventMunge\r\n */\r\n\r\n'use strict';\r\n\r\nexports.__esModule = true;\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\r\n\r\nvar invariant = require('fbjs/lib/invariant');\r\n\r\nvar _prefix = 'ID_';\r\n\r\n/**\r\n * Dispatcher is used to broadcast payloads to registered callbacks. This is\r\n * different from generic pub-sub systems in two ways:\r\n *\r\n *   1) Callbacks are not subscribed to particular events. Every payload is\r\n *      dispatched to every registered callback.\r\n *   2) Callbacks can be deferred in whole or part until other callbacks have\r\n *      been executed.\r\n *\r\n * For example, consider this hypothetical flight destination form, which\r\n * selects a default city when a country is selected:\r\n *\r\n *   var flightDispatcher = new Dispatcher();\r\n *\r\n *   // Keeps track of which country is selected\r\n *   var CountryStore = {country: null};\r\n *\r\n *   // Keeps track of which city is selected\r\n *   var CityStore = {city: null};\r\n *\r\n *   // Keeps track of the base flight price of the selected city\r\n *   var FlightPriceStore = {price: null}\r\n *\r\n * When a user changes the selected city, we dispatch the payload:\r\n *\r\n *   flightDispatcher.dispatch({\r\n *     actionType: 'city-update',\r\n *     selectedCity: 'paris'\r\n *   });\r\n *\r\n * This payload is digested by `CityStore`:\r\n *\r\n *   flightDispatcher.register(function(payload) {\r\n *     if (payload.actionType === 'city-update') {\r\n *       CityStore.city = payload.selectedCity;\r\n *     }\r\n *   });\r\n *\r\n * When the user selects a country, we dispatch the payload:\r\n *\r\n *   flightDispatcher.dispatch({\r\n *     actionType: 'country-update',\r\n *     selectedCountry: 'australia'\r\n *   });\r\n *\r\n * This payload is digested by both stores:\r\n *\r\n *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {\r\n *     if (payload.actionType === 'country-update') {\r\n *       CountryStore.country = payload.selectedCountry;\r\n *     }\r\n *   });\r\n *\r\n * When the callback to update `CountryStore` is registered, we save a reference\r\n * to the returned token. Using this token with `waitFor()`, we can guarantee\r\n * that `CountryStore` is updated before the callback that updates `CityStore`\r\n * needs to query its data.\r\n *\r\n *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {\r\n *     if (payload.actionType === 'country-update') {\r\n *       // `CountryStore.country` may not be updated.\r\n *       flightDispatcher.waitFor([CountryStore.dispatchToken]);\r\n *       // `CountryStore.country` is now guaranteed to be updated.\r\n *\r\n *       // Select the default city for the new country\r\n *       CityStore.city = getDefaultCityForCountry(CountryStore.country);\r\n *     }\r\n *   });\r\n *\r\n * The usage of `waitFor()` can be chained, for example:\r\n *\r\n *   FlightPriceStore.dispatchToken =\r\n *     flightDispatcher.register(function(payload) {\r\n *       switch (payload.actionType) {\r\n *         case 'country-update':\r\n *         case 'city-update':\r\n *           flightDispatcher.waitFor([CityStore.dispatchToken]);\r\n *           FlightPriceStore.price =\r\n *             getFlightPriceStore(CountryStore.country, CityStore.city);\r\n *           break;\r\n *     }\r\n *   });\r\n *\r\n * The `country-update` payload will be guaranteed to invoke the stores'\r\n * registered callbacks in order: `CountryStore`, `CityStore`, then\r\n * `FlightPriceStore`.\r\n */\r\n\r\nvar Dispatcher = (function () {\r\n  function Dispatcher() {\r\n    _classCallCheck(this, Dispatcher);\r\n\r\n    this._callbacks = {};\r\n    this._isDispatching = false;\r\n    this._isHandled = {};\r\n    this._isPending = {};\r\n    this._lastID = 1;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to be invoked with every dispatched payload. Returns\r\n   * a token that can be used with `waitFor()`.\r\n   */\r\n\r\n  Dispatcher.prototype.register = function register(callback) {\r\n    var id = _prefix + this._lastID++;\r\n    this._callbacks[id] = callback;\r\n    return id;\r\n  };\r\n\r\n  /**\r\n   * Removes a callback based on its token.\r\n   */\r\n\r\n  Dispatcher.prototype.unregister = function unregister(id) {\r\n    !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;\r\n    delete this._callbacks[id];\r\n  };\r\n\r\n  /**\r\n   * Waits for the callbacks specified to be invoked before continuing execution\r\n   * of the current callback. This method should only be used by a callback in\r\n   * response to a dispatched payload.\r\n   */\r\n\r\n  Dispatcher.prototype.waitFor = function waitFor(ids) {\r\n    !this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : undefined;\r\n    for (var ii = 0; ii < ids.length; ii++) {\r\n      var id = ids[ii];\r\n      if (this._isPending[id]) {\r\n        !this._isHandled[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : undefined;\r\n        continue;\r\n      }\r\n      !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;\r\n      this._invokeCallback(id);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Dispatches a payload to all registered callbacks.\r\n   */\r\n\r\n  Dispatcher.prototype.dispatch = function dispatch(payload) {\r\n    !!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;\r\n    this._startDispatching(payload);\r\n    try {\r\n      for (var id in this._callbacks) {\r\n        if (this._isPending[id]) {\r\n          continue;\r\n        }\r\n        this._invokeCallback(id);\r\n      }\r\n    } finally {\r\n      this._stopDispatching();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Is this Dispatcher currently dispatching.\r\n   */\r\n\r\n  Dispatcher.prototype.isDispatching = function isDispatching() {\r\n    return this._isDispatching;\r\n  };\r\n\r\n  /**\r\n   * Call the callback stored with the given id. Also do some internal\r\n   * bookkeeping.\r\n   *\r\n   * @internal\r\n   */\r\n\r\n  Dispatcher.prototype._invokeCallback = function _invokeCallback(id) {\r\n    this._isPending[id] = true;\r\n    this._callbacks[id](this._pendingPayload);\r\n    this._isHandled[id] = true;\r\n  };\r\n\r\n  /**\r\n   * Set up bookkeeping needed when dispatching.\r\n   *\r\n   * @internal\r\n   */\r\n\r\n  Dispatcher.prototype._startDispatching = function _startDispatching(payload) {\r\n    for (var id in this._callbacks) {\r\n      this._isPending[id] = false;\r\n      this._isHandled[id] = false;\r\n    }\r\n    this._pendingPayload = payload;\r\n    this._isDispatching = true;\r\n  };\r\n\r\n  /**\r\n   * Clear bookkeeping used for dispatching.\r\n   *\r\n   * @internal\r\n   */\r\n\r\n  Dispatcher.prototype._stopDispatching = function _stopDispatching() {\r\n    delete this._pendingPayload;\r\n    this._isDispatching = false;\r\n  };\r\n\r\n  return Dispatcher;\r\n})();\r\n\r\nmodule.exports = Dispatcher;"]},"metadata":{},"sourceType":"script"}