{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github\\\\pi-assoc-pais\\\\develop\\\\src\\\\App.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Redirect, Route } from \"react-router-dom\";\nimport routes from \"./routes\";\nimport withTracker from \"./withTracker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./shards-dashboard/styles/shards-dashboards.1.1.0.min.css\";\nimport { firestore, initDoc } from \"./firebase-config\";\nimport { DefaultLayout } from \"./layouts\";\nimport { Container } from \"shards-react\";\n\nconst updateInitialRoute = () => {\n  var flag = false;\n  return initDoc.get().then(doc => {\n    console.log(\"doc -> \", doc);\n    console.log(\"doc install ->\", doc[\"install\"]);\n\n    if (doc.exists === false) {\n      console.log(\"vou devolver /assoc-config\");\n      routes[0] = {\n        path: \"/\",\n        exact: true,\n        layout: DefaultLayout,\n        component: () => React.createElement(Redirect, {\n          to: \"/assoc-config\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        })\n      };\n    } else {\n      console.log(\"vou devolver /login\");\n      routes[0] = {\n        path: \"/\",\n        exact: true,\n        layout: DefaultLayout,\n        component: () => React.createElement(Redirect, {\n          to: \"/login\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        })\n      };\n    }\n\n    flag = true;\n    console.log(\"primeiro component depois do update: \", routes[0].component);\n    return true;\n  }).catch(err => {\n    alert(err);\n  });\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: false\n    }; // state antes de fazer a verificacao do doc de instalação\n  }\n\n  componentDidMount() {\n    const self = this;\n    const promise = updateInitialRoute();\n    promise.then(result => {\n      /*\r\n       * atualizar para o resultado para o resultado da verificacao\r\n       * neste caso, o resultado é sempre true, já que a verificacao atualizada\r\n       * diretamente o path para o qual vamos fazer redirect */\n      self.setState({\n        data: result\n      });\n    });\n  }\n\n  render() {\n    console.log(\"state data antes do render -> \", this.state.data);\n\n    if (this.state.data) {\n      // se a verificacao ja tiver sido feita, renderizamos a pagina\n      return React.createElement(Router, {\n        basename: process.env.REACT_APP_BASENAME || \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, routes.map((route, index) => {\n        //console.log(\"index: \", index);\n        //console.log(\"component: \", route.component);\n        return React.createElement(Route, {\n          key: index,\n          path: route.path,\n          exact: route.exact,\n          component: withTracker(props => {\n            return React.createElement(route.layout, Object.assign({}, props, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 90\n              },\n              __self: this\n            }), React.createElement(route.component, Object.assign({}, props, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 91\n              },\n              __self: this\n            })));\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        });\n      })));\n    } else {\n      // enquanto a verificacao nao tiver sido feita, vamos aguardar na Loading page\n      return React.createElement(Container, {\n        fluid: true,\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignContent: \"center\",\n          alignItems: \"center\",\n          position: \"absolute\",\n          left: \"50%\",\n          top: \"50%\",\n          transform: \"translate(-50%, -50%)\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \" \", React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"A carregar...\"));\n    }\n  }\n\n}\n\nexport default App;\n/*export default () => (\r\n    <Router basename={process.env.REACT_APP_BASENAME || \"\"}>\r\n      <InitURLFetcher/>\r\n    </Router>\r\n);*/","map":{"version":3,"sources":["D:/Github/pi-assoc-pais/develop/src/App.js"],"names":["React","BrowserRouter","Router","Redirect","Route","routes","withTracker","firestore","initDoc","DefaultLayout","Container","updateInitialRoute","flag","get","then","doc","console","log","exists","path","exact","layout","component","catch","err","alert","App","Component","constructor","props","state","data","componentDidMount","self","promise","result","setState","render","process","env","REACT_APP_BASENAME","map","route","index","display","justifyContent","alignContent","alignItems","position","left","top","transform"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { BrowserRouter as Router, Redirect, Route } from \"react-router-dom\";\r\n\r\nimport routes from \"./routes\";\r\nimport withTracker from \"./withTracker\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./shards-dashboard/styles/shards-dashboards.1.1.0.min.css\";\r\n\r\n\r\nimport {firestore, initDoc} from \"./firebase-config\";\r\nimport {DefaultLayout} from \"./layouts\";\r\nimport {Container} from \"shards-react\";\r\n\r\n\r\nconst updateInitialRoute = () => {\r\n  var flag = false;\r\n\r\n  return initDoc\r\n    .get()\r\n    .then(doc => {\r\n      console.log(\"doc -> \", doc);\r\n\r\n      console.log(\"doc install ->\", doc[\"install\"]);\r\n\r\n      if (doc.exists === false) {\r\n        console.log(\"vou devolver /assoc-config\");\r\n        routes[0] = {\r\n          path: \"/\",\r\n          exact: true,\r\n          layout: DefaultLayout,\r\n          component: () => <Redirect to={\"/assoc-config\"} />\r\n        };\r\n      } else {\r\n        console.log(\"vou devolver /login\");\r\n        routes[0] = {\r\n          path: \"/\",\r\n          exact: true,\r\n          layout: DefaultLayout,\r\n          component: () => <Redirect to={\"/login\"} />\r\n        };\r\n      }\r\n      flag = true;\r\n      console.log(\"primeiro component depois do update: \", routes[0].component);\r\n\r\n      return true;\r\n    })\r\n    .catch(err => {\r\n      alert(err);\r\n    });\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { data: false }; // state antes de fazer a verificacao do doc de instalação\r\n  }\r\n\r\n  componentDidMount() {\r\n    const self = this;\r\n    const promise = updateInitialRoute();\r\n\r\n    promise.then(result => {\r\n      /*\r\n       * atualizar para o resultado para o resultado da verificacao\r\n       * neste caso, o resultado é sempre true, já que a verificacao atualizada\r\n       * diretamente o path para o qual vamos fazer redirect */\r\n      self.setState({ data: result });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    console.log(\"state data antes do render -> \", this.state.data);\r\n\r\n    if (this.state.data) {\r\n      // se a verificacao ja tiver sido feita, renderizamos a pagina\r\n      return (\r\n        <Router basename={process.env.REACT_APP_BASENAME || \"\"}>\r\n          <div>\r\n            {routes.map((route, index) => {\r\n              //console.log(\"index: \", index);\r\n              //console.log(\"component: \", route.component);\r\n              return (\r\n                <Route\r\n                  key={index}\r\n                  path={route.path}\r\n                  exact={route.exact}\r\n                  component={withTracker(props => {\r\n                    return (\r\n                      <route.layout {...props}>\r\n                        <route.component {...props} />\r\n                      </route.layout>\r\n                    );\r\n                  })}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </Router>\r\n      );\r\n    } else {\r\n      // enquanto a verificacao nao tiver sido feita, vamos aguardar na Loading page\r\n      return (\r\n        <Container\r\n          fluid\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignContent: \"center\",\r\n            alignItems: \"center\",\r\n            position: \"absolute\",\r\n            left: \"50%\",\r\n            top: \"50%\",\r\n            transform: \"translate(-50%, -50%)\"\r\n          }}\r\n        >\r\n          {\" \"}\r\n          <h1>A carregar...</h1>\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n/*export default () => (\r\n    <Router basename={process.env.REACT_APP_BASENAME || \"\"}>\r\n      <InitURLFetcher/>\r\n    </Router>\r\n);*/\r\n"]},"metadata":{},"sourceType":"module"}