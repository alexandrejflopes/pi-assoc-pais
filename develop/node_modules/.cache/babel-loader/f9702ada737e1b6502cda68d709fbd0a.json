{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\User\\\\Desktop\\\\Ambiente de Trabalho\\\\Universidade\\\\Ano 3\\\\Semestre 2\\\\PI\\\\Projeto\\\\repos\\\\pi-assoc-pais\\\\develop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\Ambiente de Trabalho\\\\Universidade\\\\Ano 3\\\\Semestre 2\\\\PI\\\\Projeto\\\\repos\\\\pi-assoc-pais\\\\develop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\User\\\\Desktop\\\\Ambiente de Trabalho\\\\Universidade\\\\Ano 3\\\\Semestre 2\\\\PI\\\\Projeto\\\\repos\\\\pi-assoc-pais\\\\develop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\User\\\\Desktop\\\\Ambiente de Trabalho\\\\Universidade\\\\Ano 3\\\\Semestre 2\\\\PI\\\\Projeto\\\\repos\\\\pi-assoc-pais\\\\develop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { firestore, storageRef, initDoc, firebaseConfig } from \"../firebase-config\";\nimport firebase from \"firebase\";\nimport { getGravatarURL, defaultLogoFile, newParametersTypes, languageCode, newParametersEntities, membersImportFileNewParametersStartIndex, studentsImportFileNewParametersStartIndex, membersCSVparamsIndexes, studentsCSVparamsIndexes, studentsParameters, parentsParameters, notAvailableDesignation, zipCodeRegexes, defaultAvatar, showToast, toastTypes, emailRegex, cargoDocKey, deletedAtribute, validatedAtribute, blockedAtribute, roleAdminPermissionDesignation } from \"../utils/general_utils\";\nimport { jsonParamsErrorMessage, jsonOrCsvParamsErrorMessage, importSucessMessage, provideRequiredFieldsMessage, invalidZipMessage, registationSuccess, registationError, addCaseSucess, addCaseError, uploadLogoError, installError, invalidEmailMessage, rolesFileErrorMessage, installDefaultLogoError } from \"../utils/messages_strings\";\nvar jsonErrorMessage = jsonParamsErrorMessage[languageCode];\nvar csvsErrorMessage = jsonOrCsvParamsErrorMessage[languageCode];\nvar sucessImportMessage = importSucessMessage[languageCode];\nvar requiredFieldsMissingMessage = provideRequiredFieldsMessage[languageCode];\nvar rolesErrorMessage = rolesFileErrorMessage[languageCode];\nvar parentDesignation = newParametersEntities.parent[languageCode];\nvar studentDesignation = newParametersEntities.student[languageCode];\nvar NAdesignation = notAvailableDesignation[languageCode];\nexport var installGotErrors = false;\nvar membersEmails = {};\nvar membersDocsList = []; // save members docs to check their roles later\n\nvar newParametersData = {\n  parent: {\n    provided: false,\n    params: null\n  },\n  student: {\n    provided: false,\n    params: null\n  }\n}; // save parameters (which are the headers) from imported csv\n\nvar membersFileHeaders = [];\nvar studentsFileHeaders = [];\n/*\r\n* function to fetch existing associate numbers\r\n* */\n\nfunction fetchAssocNumbers() {\n  var project_id = firebaseConfig.projectId;\n  var uri = \"https://us-central1-\" + project_id + \".cloudfunctions.net/api/getParentsNumeroSocio\"; //console.log(\"profile uri: \" + uri);\n\n  var request = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var assocNumbers;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(uri).then(function (resp) {\n                return resp.json();\n              }) // Transform the data into json\n              .then(function (data) {\n                console.log(\"assoc numbers recebidos -> \", JSON.stringify(data));\n                assocNumbers = data;\n              }).catch(function (error) {\n                console.log(error);\n              });\n\n            case 2:\n              return _context.abrupt(\"return\", assocNumbers);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function request() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return request();\n}\n/*\r\n* function to get a new associate number (the associate numbers are incremental)\r\n* */\n\n\nfunction generateNewAssocNumber(numbersArray) {\n  // TODO: use Firebase Increment?\n  // remove empty strings, nulls and undefined and convert number strings to actual numbers\n  var numbers = numbersArray.filter(function (el) {\n    return el;\n  }).map(function (x) {\n    return +x;\n  });\n  return Math.max.apply(Math, _toConsumableArray(numbers)) + 1;\n} // ------------------------------------------------------------\n// NEW PARAMETERS\n\n/* function to check if the entities (parent and student) have the right designation\r\n* and if their parameters are supported (have also the right designation)\r\n* */\n\n\nfunction checkJSONparamsEntitiesAndTypes(json) {\n  // check entities\n  var entities = Object.keys(json).length; //console.log(\"entities (\" + entities + \") -> \" + Object.keys(json));\n\n  var parentParams = json[parentDesignation];\n  var studentParams = json[studentDesignation];\n\n  if (entities === 1 && parentParams == null && studentParams == null) {\n    /*\r\n    * with one entity, just one of them must be null;\r\n    * if none of them is parent or student: invalid JSON\r\n    * */\n    return false;\n  }\n\n  if (entities === 2 && (parentParams == null || studentParams == null)) {\n    // if there are 2, but at least one of them is null: invalid JSON\n    return false;\n  } //parentParams ? console.log(\"parentParams -> \" + JSON.stringify(parentParams)) : console.log(\"parentParams -> \" + parentParams);\n  //studentParams ? console.log(\"studentParams -> \" + JSON.stringify(studentParams)) : console.log(\"studentParams -> \" + studentParams);\n\n\n  if (entities === 0) {\n    // allow no parameters, as the input field is required\n    return true;\n  } else if (entities >= 3) {\n    // only 2 entities, at max (parent and student)\n    return false;\n  } else if (1 <= entities <= 2) {\n    // check parameters themselves\n    var parentKeys;\n    var studentKeys;\n    if (parentParams) parentKeys = Object.keys(parentParams);\n    if (studentParams) studentKeys = Object.keys(studentParams); //console.log(\"parentKeys: \" + parentKeys);\n    //console.log(\"studentKeys: \" + studentKeys);\n\n    /* if they exist, but have no parameters: JSON no accepted\r\n    *   - if the user does not want parameters for either\r\n    *     parent or student, simply does not write them in the JSON\r\n    * */\n\n    if (parentParams) {\n      if (parentKeys.length === 0) return false;\n    }\n\n    if (studentParams) {\n      if (studentKeys.length === 0) return false;\n    }\n\n    var TEXT = newParametersTypes.TEXT[languageCode];\n    var INT = newParametersTypes.INT[languageCode];\n    var FLOAT = newParametersTypes.FLOAT[languageCode]; //  check parent's parameters\n\n    if (parentParams) {\n      if (parentKeys.length > 0) {\n        for (var i = 0; i < parentKeys.length; i++) {\n          var chave = parentKeys[i]; //console.log(chave + \" : \" + parentParams[chave]);\n          // if none of supported parameters: invalid JSON\n\n          if (parentParams[chave] !== TEXT && parentParams[chave] !== INT && parentParams[chave] !== FLOAT) {\n            return false;\n          }\n        }\n      }\n    } //  check student's parameters\n\n\n    if (studentParams) {\n      if (studentKeys.length > 0) {\n        for (var _i = 0; _i < studentKeys.length; _i++) {\n          var _chave = studentKeys[_i]; //console.log(chave + \" : \" + studentParams[chave]);\n          // if none of supported parameters: invalid JSON\n\n          if (studentParams[_chave] !== TEXT && studentParams[_chave] !== INT && studentParams[_chave] !== FLOAT) {\n            return false;\n          }\n        }\n      }\n    }\n  } // save globally to check later against the CSV parameters\n\n\n  if (parentParams != null) {\n    newParametersData.parent.provided = true;\n    newParametersData.parent.params = parentParams;\n  }\n\n  if (studentParams != null) {\n    newParametersData.student.provided = true;\n    newParametersData.student.params = studentParams;\n  }\n\n  return true;\n}\n\nfunction getAndSaveJSONparamsData(jsonfile, callback) {\n  // callback will be the rest of the installation\n  var reader = new FileReader();\n  var fileString = \"NR\";\n\n  reader.onloadend = function () {\n    fileString = reader.result;\n    var jsonCorrect = false; // control if there were problems with JSON or not\n\n    try {\n      var json = JSON.parse(fileString);\n      jsonCorrect = true;\n\n      if (checkJSONparamsEntitiesAndTypes(json)) {\n        jsonCorrect = true;\n        saveNewParamsFromJSONToDB(json);\n        callback(jsonCorrect);\n      } else {\n        jsonCorrect = false;\n        callback(jsonCorrect);\n      }\n    } catch (e) {\n      jsonCorrect = false;\n      callback(jsonCorrect);\n    }\n  };\n\n  reader.readAsText(jsonfile, \"UTF-8\");\n}\n/*\r\n * receives a JSON object and saves it to Firestore\r\n * */\n\n\nfunction saveNewParamsFromJSONToDB(json) {\n  var paramsDoc = json;\n  var docRef = firestore.doc(\"initialConfigs/newParameters\");\n  docRef.set(paramsDoc).then(function () {//console.log(\"Novos parÃ¢metros guardados com sucesso.\");\n  }).catch(function (error) {\n    installGotErrors = true;\n  });\n}\n\nfunction saveRegistToDB(json) {\n  var docRef = firestore.collection(\"parents\");\n  var parentRef = docRef.doc(json[\"Email\"]);\n  parentRef.set(json).then(function () {\n    showToast(registationSuccess[languageCode], 5000, toastTypes.SUCCESS);\n  }).catch(function (error) {\n    console.log(\"regist save error: \" + JSON.stringify(error));\n    showToast(registationError[languageCode], 5000, toastTypes.ERROR);\n  });\n}\n\nfunction saveCaseToDB(json) {\n  //console.log(\"Json to save to DB -> \", JSON.stringify(json));\n  var docRef = firestore.collection(\"casos\");\n  var ref = docRef.doc();\n  ref.set(json).then(function () {\n    showToast(addCaseSucess[languageCode], 5000, toastTypes.SUCCESS);\n  }).catch(function (error) {\n    showToast(addCaseError[languageCode], 5000, toastTypes.ERROR);\n  });\n} // ------------------------------------------------------------\n// PROCESS CSV\n\n/*\r\n* function to check if the parameters provided in JSON are also\r\n* present in the concerning CSV file (parents and/or students) and vice-versa;\r\n* this receives and array of previously validated parameters from the JSON file\r\n* and also an array with the new parameters of CSV\r\n* */\n\n\nfunction compareCSVandJsonParameters(jsonParams, csvParams) {\n  // check if both arrays have the same amount of parameters\n  if (jsonParams.length !== csvParams.length) return false; // if no parameters, then is valid\n\n  if (jsonParams.length === 0 && csvParams.length === 0) return true; // check if all parameters from JSON are also in the CSV\n\n  for (var i = 0; i < jsonParams.length; i++) {\n    if (!csvParams.includes(jsonParams[i])) {\n      return false;\n    }\n  } // check if all parameters from JSON are also in the CSV\n\n\n  for (var _i2 = 0; _i2 < csvParams.length; _i2++) {\n    if (!jsonParams.includes(csvParams[_i2])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/*\r\n* function for, given a list of parameters from CSV, checks if\r\n* they are all expected/suported by our platform;\r\n* the parent argument (boolean) specifies if we are evaluating\r\n* the parent parameters or not (the students)\r\n* */\n\n\nfunction areAllParametersSupported(paramsArray, parent) {\n  var supportedParams = [];\n\n  if (parent) {\n    for (var x in parentsParameters) {\n      supportedParams.push(parentsParameters[x][languageCode]);\n    }\n  } else {\n    for (var _x in studentsParameters) {\n      supportedParams.push(studentsParameters[_x][languageCode]);\n    }\n  } //console.log(\"paramsArray -> \" + paramsArray);\n  //console.log(\"supportedParams -> \" + supportedParams);\n\n\n  for (var i = 0; i < paramsArray.length; i++) {\n    if (!supportedParams.includes(paramsArray[i].trim())) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/*\r\n* function for, given a list of parameters from CSV, checks if\r\n* they are all really new and are not equal (in their name)\r\n* to the parameters that our plataform already supports\r\n* */\n\n\nfunction allNewParametersAreReallyNew(supportedParams, newParams) {\n  if (newParams.length === 0) {\n    return true; // if no new parameters, so this must pass\n  }\n\n  for (var i = 0; i < newParams.length; i++) {\n    for (var x = 0; x < supportedParams.length; x++) {\n      // compare the names in the same conditions\n      var newParamName = newParams[i].trim().toLowerCase();\n      var supportedParamName = supportedParams[x].trim().toLowerCase();\n      if (newParamName === supportedParamName) return false;\n    }\n  }\n\n  return true;\n}\n/*\r\n * function to process CSV with members and students' data:\r\n *  extract the headers an analyse each line\r\n *    - result for each line: { \"header1\" : data1, \"header2\" : data2, ...}\r\n * */\n\n\nfunction getandSaveCSVdata(parentsFile, childrenFile, callback) {\n  var parentReader = new FileReader();\n  var childrenReader = new FileReader();\n  var parentFileString = \"NR\";\n  var childrenFileString = \"NR\";\n  var filesParamsCorrect = false; // control the parameters validation between JSON and CSV\n\n  parentReader.onloadend = function () {\n    parentFileString = parentReader.result;\n\n    try {\n      // if there's no information in the file, it's invalid\n      if (parentFileString.trim().length === 0) {\n        throw \"Too few data in CSV file to process\";\n      }\n\n      var parentList = setupCSVData(parentFileString, true);\n\n      childrenReader.onloadend = function () {\n        childrenFileString = childrenReader.result;\n\n        try {\n          // if there's no information in the file, it's invalid\n          if (childrenFileString.trim().length === 0) {\n            throw \"Too few data in CSV file to process\";\n          }\n\n          var childrenList = setupCSVData(childrenFileString, false); // check if expected parameters are with the supported name for language\n          // get only the parameters from CSV that we are expecting and check if we support them\n\n          var parentsExpectedHeaders = membersFileHeaders.slice(0, membersImportFileNewParametersStartIndex);\n          var studentsExpectedHeaders = studentsFileHeaders.slice(0, studentsImportFileNewParametersStartIndex);\n\n          if (!areAllParametersSupported(parentsExpectedHeaders, true) || !areAllParametersSupported(studentsExpectedHeaders, false)) {\n            filesParamsCorrect = false;\n            callback(filesParamsCorrect);\n            return;\n          }\n\n          var parentParams = [];\n          var studentParams = [];\n          if (newParametersData.parent.provided) parentParams = Object.keys(newParametersData.parent.params);\n          if (newParametersData.student.provided) studentParams = Object.keys(newParametersData.student.params); //console.log(\"parentParams: \" + parentParams);\n          //console.log(\"studentParams: \" + studentParams);\n          // get only the headers with the new parameters\n\n          var parentsNewHeaders = membersFileHeaders.slice(membersImportFileNewParametersStartIndex);\n          var studentsNewHeaders = studentsFileHeaders.slice(studentsImportFileNewParametersStartIndex);\n\n          if (!allNewParametersAreReallyNew(parentsExpectedHeaders, parentsNewHeaders) || !allNewParametersAreReallyNew(studentsExpectedHeaders, studentsNewHeaders)) {\n            filesParamsCorrect = false;\n            callback(filesParamsCorrect);\n            return;\n          } //console.log(\"parentsNewHeaders: \" + parentsNewHeaders);\n          //console.log(\"studentsNewHeaders: \" + studentsNewHeaders);\n\n\n          if (compareCSVandJsonParameters(parentParams, parentsNewHeaders) && compareCSVandJsonParameters(studentParams, studentsNewHeaders)) {\n            filesParamsCorrect = true;\n            saveParentsAndChildrenFromFileDatatoDB(parentList, childrenList);\n            callback(filesParamsCorrect);\n          } else {\n            filesParamsCorrect = false;\n            callback(filesParamsCorrect);\n          }\n        } catch (e) {\n          // catch error if the CSV is improperly formatted, for example\n          filesParamsCorrect = false;\n          callback(filesParamsCorrect);\n        }\n      };\n    } catch (e) {\n      // catch error if the CSV is improperly formatted, for example\n      filesParamsCorrect = false;\n      callback(filesParamsCorrect);\n    }\n  };\n\n  parentReader.readAsText(parentsFile, \"UTF-8\");\n  childrenReader.readAsText(childrenFile, \"UTF-8\");\n}\n/*\r\n * analyse processed CSV data and saves it in Firestore\r\n *   -  for each parent, will check the students with the corresponding\r\n *      associate number and add that students documents in the array\r\n *      of children of that parent document\r\n *   -  finally, the parent document (with its children) will be saved\r\n *      in Firestore\r\n * */\n\n\nfunction saveParentsAndChildrenFromFileDatatoDB(parentsList, childrenList) {\n  // parents and children list ordered by associate number\n  var parentDocList = parentsList.sort(function (a, b) {\n    return parseInt(a[Object.keys(a)[membersCSVparamsIndexes.assoc_num_index]]) > parseInt(b[Object.keys(b)[membersCSVparamsIndexes.assoc_num_index]]) ? 1 : -1;\n  });\n  var childrenDocList = childrenList.sort(function (a, b) {\n    return parseInt(a[Object.keys(a)[studentsCSVparamsIndexes.parent_assoc_num_index]]) > parseInt(b[Object.keys(b)[studentsCSVparamsIndexes.parent_assoc_num_index]]) ? 1 : -1;\n  }); //console.log(\"parentDocList -> \", parentDocList);\n  //console.log(\"childrenDocList -> \", childrenDocList);\n\n  var docRef = firestore.collection(\"parents\"); // add each to parent the students with the same parent's associate number\n\n  for (var i = 0; i < parentDocList.length; i++) {\n    var parentDoc = parentDocList[i];\n    var numSocio = parentDoc[Object.keys(parentDoc)[membersCSVparamsIndexes.assoc_num_index]];\n    var nome = parentDoc[Object.keys(parentDoc)[membersCSVparamsIndexes.name_index]].split(\" \")[0]; // first name\n\n    var email = parentDoc[Object.keys(parentDoc)[membersCSVparamsIndexes.email_index]];\n    membersEmails[nome] = email; // get name and email to send email afterwards\n\n    var parentChildren = []; // childrens of the current parent\n    // search for children with the same parent's associate number as above\n\n    for (var j = 0; j < childrenDocList.length; j++) {\n      var child = childrenDocList[j];\n      if (numSocio !== child[Object.keys(child)[studentsCSVparamsIndexes.parent_assoc_num_index]]) // if associate number is not equal, then this is not child of the current parent\n        continue;\n      var childDoc = child; // remove associate number and parent's name from child's document, as\n      // it will be inside its parent documento\n\n      delete childDoc[Object.keys(childDoc)[0]]; // TODO: check this index\n\n      delete childDoc[Object.keys(childDoc)[0]]; // remove 0 because the element at 1 shifted to 0 in the line above\n\n      childDoc[studentsParameters.PHOTO[languageCode]] = defaultAvatar;\n      childDoc[deletedAtribute] = false;\n      parentChildren.push(childDoc);\n    }\n\n    parentDoc[deletedAtribute] = false; // add children document array to parent's documento\n\n    parentDoc[parentsParameters.CHILDREN[languageCode]] = parentChildren; // convert admin boolean from CSV from string to boolean\n\n    parentDoc[parentsParameters.ADMIN[languageCode]] = parentDoc[parentsParameters.ADMIN[languageCode]] === \"true\"; // convert dues payment boolean from CSV from string to boolean (if not available, it gets false as well)\n\n    parentDoc[parentsParameters.PAYED_FEE[languageCode]] = parentDoc[parentsParameters.PAYED_FEE[languageCode]] === \"true\"; // add remaining necessary parameters\n\n    parentDoc[parentsParameters.FEES[languageCode]] = []; //parentDoc[\"Data inscricao\"] = new Date().toJSON().split(\"T\")[0]; // get date on format: 2015-03-25\n\n    parentDoc[parentsParameters.REGISTER_DATE[languageCode]] = new Date(); // only regulars with payed dues are validated (admins are always valid)\n\n    parentDoc[validatedAtribute] = !(!parentDoc[parentsParameters.ADMIN[languageCode]] && !parentDoc[parentsParameters.PAYED_FEE[languageCode]]);\n    parentDoc[blockedAtribute] = false; // imported parents are not blocked initially\n    // avatar\n\n    parentDoc[parentsParameters.PHOTO[languageCode]] = getGravatarURL(email);\n    var parentRef = docRef.doc(email); // email as document id\n\n    parentRef.set(parentDoc).then(function () {//console.log(\"EE e educandos guardados com sucesso.\");\n    }).catch(function (error) {\n      installGotErrors = true;\n    });\n  }\n}\n/*\r\n* function to read and format data from CSV in an array of dictionaries;\r\n* receives the file as a string and a boolean to indicate it's reading\r\n* the parents' CSV or the students'\r\n* */\n\n\nfunction setupCSVData(fileString, parents) {\n  var allLines = fileString.split(/\\r\\n|\\n/).filter(function (item) {\n    return item;\n  }); // remove empty strings\n  //console.log(\"allLines -> \", allLines);\n  // if there's no information in the file, it's invalid\n\n  if (allLines.length <= 1) {\n    console.log(\"sem dados nas linhas\");\n    throw \"Too few data in CSV file to process\";\n  } // remove empty strings and trailing spaces\n\n\n  var headers = allLines[0].split(/[,;]+/).filter(function (item) {\n    return item;\n  }).map(function (s) {\n    return s.trim();\n  }); // save this headers (which represent parameters) globally\n\n  if (parents) membersFileHeaders = headers;else studentsFileHeaders = headers; // ---------------------------------------------------------------\n\n  var rowsData = []; //console.log(\"headers -> \", headers);\n\n  for (var i = 1; i < allLines.length; i++) {\n    var lineDict = {}; // remove empty strings and trailing spaces\n\n    var dadosLinha = allLines[i].split(/[,;]+/).filter(function (item) {\n      return item;\n    }).map(function (s) {\n      return s.trim();\n    }); //console.log(\"dadosLinha atual -> \", dadosLinha);\n    //console.log(\"dadosLinha length -> \", dadosLinha.length);\n    //console.log(\"headers length -> \", headers.length);\n    // if there's more data than corresponding headers; CSV not valid\n\n    if (dadosLinha.length !== headers.length) {\n      // eslint-disable-next-line no-throw-literal\n      throw 'CSV headers and data in a line do not match';\n    }\n\n    dadosLinha = dadosLinha.map(function (item) {\n      return item.toUpperCase() === NAdesignation ? NAdesignation : item;\n    }); // convert boolean strings to lower case\n\n    dadosLinha = dadosLinha.map(function (item) {\n      return item.toLowerCase() === \"true\" ? \"true\" : item;\n    });\n    dadosLinha = dadosLinha.map(function (item) {\n      return item.toLowerCase() === \"false\" ? \"false\" : item;\n    }); // check if boolean params in members csv are really booleans\n\n    if (parents) {\n      if (dadosLinha[membersCSVparamsIndexes.quotas_index] !== \"true\" && dadosLinha[membersCSVparamsIndexes.quotas_index] !== \"false\") {\n        //console.log(\"Expected 'true' or 'false' in quotas column!\");\n        throw \"Expected 'true' or 'false' in quotas column!\";\n      }\n\n      if (dadosLinha[membersCSVparamsIndexes.admin_index] !== \"true\" && dadosLinha[membersCSVparamsIndexes.admin_index] !== \"false\") {\n        //console.log(\"Expected 'true' or 'false' in admin column!\");\n        throw \"Expected 'true' or 'false' in admin column!\";\n      }\n    } //console.assert(dadosLinha.length === headers.length);\n\n\n    for (var j = 0; j < dadosLinha.length; j++) {\n      lineDict[headers[j]] = dadosLinha[j];\n    }\n\n    rowsData.push(lineDict);\n  } // save parents globally to save their roles\n\n\n  if (parents) membersDocsList = rowsData;\n  return rowsData;\n} // ------------------------------------------------------------\n// PROCESS ROLES\n\n/*\r\n * function to process TEXT with roles for the association's members:\r\n *  read the file, get a list of roles from it and check if the\r\n *  roles of the members from the CSV have a role from this TXT file\r\n * */\n\n\nfunction readAndCheckRolesFile(rolesFile, callback) {\n  var rolesReader = new FileReader();\n  var rolesFileString = \"NR\";\n\n  rolesReader.onloadend = function () {\n    rolesFileString = rolesReader.result;\n    var rolesFileCorrect = false; // control the correctness of roles file\n\n    try {\n      // try to parse the JSON file uploaded\n      var json = JSON.parse(rolesFileString);\n      validateRolesJSON(json, rolesFileString, callback);\n    } catch (e) {\n      console.log(e); // catch error if the JSON is improperly formatted, for example\n\n      rolesFileCorrect = false;\n      callback(rolesFileCorrect);\n    }\n  };\n\n  rolesReader.readAsText(rolesFile, \"UTF-8\");\n}\n\nfunction validateRolesJSON(json, rolesFileString, callback) {\n  var rolesFileCorrect = false;\n  var rolesNum = Object.keys(json).length; // if no roles provided, then do not accept the file\n\n  if (rolesNum === 0) {\n    throw \"No roles provided (roles file is an empty JSON)\";\n  }\n\n  for (var role in json) {\n    var roleDoc = json[role];\n    var roleDocKeys = Object.keys(roleDoc); // each role only has one permission (admin - yes or no)\n\n    if (roleDocKeys.length !== 1) {\n      throw \"Less or more than one permission provided for role <\" + role + \">\";\n    }\n\n    var permission = roleDoc[roleAdminPermissionDesignation]; // if no value for admin permission, file is invalid\n\n    if (permission == null) {\n      throw \"No admin permission for role <\" + role + \">\";\n    } // admin permission only has two values: true or false\n\n\n    if (permission !== \"false\" && permission !== \"true\") {\n      throw \"Invalid value for admin permission for role <\" + role + \">\";\n    }\n  } // if there's no information in the file, it's invalid\n\n\n  if (rolesFileString.trim().length === 0) {\n    throw \"Too few data in ROLES file to process\";\n  } // get roles from JSON as an array, removing spaces around\n\n\n  var rolesList = Object.keys(json).map(function (r) {\n    return r.trim();\n  });\n  var duplicateFilteredRolesList = [];\n\n  for (var i in rolesList) {\n    var currentRole = rolesList[i];\n\n    if (!duplicateFilteredRolesList.includes(currentRole)) {\n      duplicateFilteredRolesList.push(currentRole);\n    }\n  }\n\n  if (rolesList.length !== duplicateFilteredRolesList.length) {\n    throw \"There are duplicated roles in JSON\";\n  }\n\n  if (parentsRolesAreValid(rolesList, membersDocsList)) {\n    rolesFileCorrect = true;\n    saveRolesInDB(rolesList, json);\n    callback(rolesFileCorrect);\n  } else {\n    rolesFileCorrect = false;\n    callback(rolesFileCorrect);\n  }\n}\n/*\r\n * function to read the TEXT file with roles for the association's\r\n * members and get a list of roles from it\r\n * */\n\n\nexport function setupTXTRoles(fileString) {\n  var allLines = fileString.split(/\\r\\n|\\n/).filter(function (item) {\n    return item;\n  }); // remove empty strings\n  // if there's no information in the file, it's invalid\n\n  if (allLines.length === 0) {\n    throw \"Too few data in TXT file to process\";\n  }\n\n  var cargos = [];\n\n  for (var i = 0; i < allLines.length; i++) {\n    var cargosNaLinha = allLines[i].split(/[,]+/).filter(function (item) {\n      return item;\n    }).map(function (s) {\n      return s.trim();\n    }); // remove empty strings and trailing spaces\n\n    cargos = cargos.concat(cargosNaLinha); // add this roles to the main array\n  }\n\n  return cargos;\n}\n/*\r\n * for each role imported, save it as a document in Firestore\r\n * - for each role: {\"titulo\" (from cargoDocKey constant) : <role_name>}\r\n * */\n\nexport function saveRolesInDB(rolesArray, json) {\n  var cargosRef = firestore.collection(\"cargos\");\n\n  for (var pos in rolesArray) {\n    var _cargoDoc;\n\n    var cargo = rolesArray[pos];\n    var permission = json[cargo][roleAdminPermissionDesignation] !== \"false\";\n    var cargoDoc = (_cargoDoc = {}, _defineProperty(_cargoDoc, cargoDocKey, cargo), _defineProperty(_cargoDoc, roleAdminPermissionDesignation, permission), _cargoDoc);\n    var docRef = cargosRef.doc(cargo);\n    docRef.set(cargoDoc).then(function () {//console.log(\"Cargo <\" + cargo + \"> guardado com sucesso.\");\n    }).catch(function (error) {\n      //console.log(\"erro ao guardar cargo <\" + cargo + \">\");\n      installGotErrors = true;\n    });\n  }\n}\n/*\r\n * function to check if the roles of the members from the CSV\r\n * have a role from the TXT file provided with the association's roles\r\n * */\n\nfunction parentsRolesAreValid(rolesArray, parentsDocList) {\n  var parentsRolesValid = true;\n\n  for (var pos in parentsDocList) {\n    var parentDoc = parentsDocList[pos];\n    var parentRole = parentDoc[parentsParameters.ROLE[languageCode]];\n\n    if (!rolesArray.includes(parentRole)) {\n      //console.log(\"json nÃ£o inclui <\" + parentRole + \">\");\n      parentsRolesValid = false;\n      break;\n    }\n  }\n\n  return parentsRolesValid;\n} // --------- USER\n\n/*\r\n * send email to parent to notify it was imported to platform\r\n */\n\n\nfunction sendImportEmailToParent(_x2, _x3) {\n  return _sendImportEmailToParent.apply(this, arguments);\n}\n\nfunction _sendImportEmailToParent() {\n  _sendImportEmailToParent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(nome, email) {\n    var tempEmail, project_id, uri, request;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            // TODO: remove this hardcoded email\n            tempEmail = \"alexandrejflopes@ua.pt\";\n            project_id = firebaseConfig.projectId;\n            uri = \"https://us-central1-\" + project_id + \".cloudfunctions.net/api/sendUserImportEmail?\" + \"email=\" + tempEmail + \"&\" + \"nome=\" + nome;\n            window.localStorage.setItem(\"emailForSignIn\", tempEmail);\n\n            request = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.next = 2;\n                        return fetch(uri).then().catch(function (error) {\n                          console.log(\"Error sending import email: \" + error);\n                        });\n\n                      case 2:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function request() {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n            return _context3.abrupt(\"return\", request());\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _sendImportEmailToParent.apply(this, arguments);\n}\n\nfunction notifyAllParents() {\n  for (var name in membersEmails) {\n    var email = membersEmails[name]; //console.log(name + \" : \" + email);\n\n    sendImportEmailToParent(name, email).then();\n  }\n} // --------- upload logos ---------\n\n\nfunction uploadDefaultLogo() {\n  // if no logo is provided, consider the default\n  var defaultLogoFileParts = defaultLogoFile.split(\"/\");\n  var defaultLogoFileName = defaultLogoFileParts[defaultLogoFileParts.length - 1]; // get just name and extension (because the name above was like 'name.<some_numbers>.<extension>'....\n\n  var fileNameParts = defaultLogoFileName.split(\".\");\n  var nome = fileNameParts[0];\n  var ext = fileNameParts[fileNameParts.length - 1];\n  var filename = nome + \".\" + ext;\n  return storageRef.child(\"logo/default/\" + filename).getDownloadURL();\n}\n\nfunction uploadNewLogo(file) {\n  var logoRef = storageRef.child(\"logo/\" + file.name);\n  return logoRef.put(file);\n}\n\nexport function saveDefaultLogoURL(url) {\n  var defaultLogoRef = firestore.collection(\"initialConfigs\");\n  var logoDoc = {\n    \"url\": url\n  };\n  var docRef = defaultLogoRef.doc(\"defaultLogo\");\n  docRef.set(logoDoc).then(function () {\n    console.log(\"defaultLogo guardado com sucesso.\");\n  }).catch(function () {\n    console.log(\"erro ao guardar defaultLogo na BD\");\n    installGotErrors = true;\n  });\n} // --------------------------------\n\n/*\r\n* receives the HTML input id and upload the file it holds\r\n* */\n\nfunction uploadAssocDataFiles(inputID) {\n  var file = document.getElementById(inputID).files[0];\n  storageRef.child(\"assoc_config_files/\" + file.name).put(file).then(function (snapshot) {//alert(\"Uploaded a blob or file!\");\n  }).catch(function (error) {\n    installGotErrors = true;\n  });\n}\n\nfunction getFormElementsAndValues() {\n  var all_labels = Array.from(document.querySelectorAll(\"label\"));\n  var all_inputs = Array.from(document.querySelectorAll(\"input\"));\n  all_inputs.push(document.querySelector(\"#configAssocDescricao\")); // add description textarea\n\n  var submittedInputs = {};\n\n  for (var i = 0; i < all_labels.length; i++) {\n    for (var j = 0; j < all_inputs.length; j++) {\n      var label = all_labels[i];\n      var input = all_inputs[j];\n      var labelText = label.innerText;\n      var labelHtmlFor = label.htmlFor;\n      var inputId = input.id;\n\n      if (labelHtmlFor === inputId) {\n        if (labelText.includes(\"(\") || labelText.includes(\"/\")) {\n          if (labelText.trim() === \"Valor da Quota (â¬)\") {\n            labelText = \"Quota\";\n          } else {\n            labelText = labelText.split(\" \")[0];\n          }\n        }\n\n        submittedInputs[labelText] = input;\n        break;\n      }\n    }\n  }\n\n  return submittedInputs;\n}\n\nfunction removeAllInvalidFeedbacks() {\n  var feedbacks = Array.from(document.querySelectorAll(\".invalid-feedback\"));\n  var inputs = Array.from(document.querySelectorAll(\"input\"));\n\n  for (var i = 0; i < feedbacks.length; i++) {\n    feedbacks[i].style.display = \"none\";\n  }\n\n  for (var _i3 = 0; _i3 < inputs.length; _i3++) {\n    if (inputs[_i3].classList.contains(\"is-invalid\")) {\n      inputs[_i3].classList.remove(\"is-invalid\");\n    }\n  }\n}\n\nfunction validZip(zipCodeValue) {\n  var zipRegex = zipCodeRegexes[languageCode].regex;\n  var zipLength = zipCodeRegexes[languageCode].length;\n  if (zipCodeValue.trim().length !== zipLength) return false;\n  var processedZip = zipCodeValue.trim().slice(0, zipLength);\n  return zipRegex.test(processedZip);\n}\n\nfunction showZipWarning(elementId) {\n  // if there's an error with zip code, not allow to submit the form and show warning\n  var zipInput = document.getElementById(elementId);\n  zipInput.classList.add(\"is-invalid\");\n  document.querySelector(\"#\" + zipInput.id + \"Feedback\").style.display = \"block\"; //zipInput.value = \"\";\n\n  showToast(invalidZipMessage[languageCode], 5000, toastTypes.ERROR);\n}\n\nfunction validEmail(emailValue) {\n  var emailReg = emailRegex;\n  var processedEmail = emailValue.trim();\n  return emailReg.test(processedEmail);\n}\n\nfunction showEmailWarning(elementId) {\n  // if there's an error with zip code, not allow to submit the form and show warning\n  var emailInput = document.getElementById(elementId);\n  emailInput.classList.add(\"is-invalid\");\n  document.querySelector(\"#\" + emailInput.id + \"Feedback\").style.display = \"block\";\n  showToast(invalidEmailMessage[languageCode], 5000, toastTypes.ERROR);\n}\n\nfunction install() {\n  removeAllInvalidFeedbacks();\n  var requiredFieldsProvided = true;\n  var policyCheckboxChecked = true;\n  var inputsInfo = getFormElementsAndValues(); // { \"labelText\" : input }\n  //console.log(\"inputsInfo v \");\n  //console.log(inputsInfo);\n\n  for (var label in inputsInfo) {\n    //console.log(\"label -> \" + label);\n    var input = inputsInfo[label]; //console.log(\"input v \");\n    //console.log(input);\n\n    if (input.value === \"\" && input.required) {\n      input.classList.add(\"is-invalid\");\n      document.querySelector(\"#\" + input.id + \"Feedback\").style.display = \"block\";\n      requiredFieldsProvided = false; // if there's an empty required input, no submit\n      //break;\n    }\n  } // verify the checkBox\n\n\n  var policyCheckbox = document.querySelector(\"input[type=checkbox]\");\n\n  if (!policyCheckbox.checked) {\n    policyCheckboxChecked = false;\n    document.querySelector(\"#\" + policyCheckbox.id + \"Feedback\").style.display = \"block\";\n  } //------------------------\n\n  /*const setupDataDocTest = () => {\r\n    let temp = {};\r\n    for (const label in inputsInfo) {\r\n      temp[label] = inputsInfo[label].value;\r\n    }\r\n      return temp;\r\n  };\r\n    const dataDocTest = setupDataDocTest();\r\n  console.log(\"dataDocTest -> \", dataDocTest);*/\n  //-------------------------\n\n\n  if (requiredFieldsProvided && policyCheckboxChecked) {\n    // validate the zip code for the country\n    var zipValue = document.getElementById(\"configAssocZip\").value;\n\n    if (!validZip(zipValue)) {\n      showZipWarning(\"configAssocZip\");\n      return;\n    }\n\n    var emailValue = document.getElementById(\"configAssocEmail\").value;\n\n    if (!validEmail(emailValue)) {\n      showEmailWarning(\"configAssocEmail\");\n      return;\n    } // read files and save their data\n\n\n    var paramsJSONfile = document.getElementById(\"configAssocNewParams\").files[0];\n    var membersFile = document.getElementById(\"configAssocMembers\").files[0];\n    var studentsFile = document.getElementById(\"configAssocStudents\").files[0];\n    var rolesFile = document.getElementById(\"configAssocCargos\").files[0];\n    getAndSaveJSONparamsData(paramsJSONfile, function (jsonCorrect) {\n      if (!jsonCorrect) {\n        // if there's an error with JSON, not allow to submit the form\n        var paramsInput = document.getElementById(\"configAssocNewParams\");\n        paramsInput.classList.add(\"is-invalid\");\n        document.querySelector(\"#\" + paramsInput.id + \"Feedback\").style.display = \"block\";\n        paramsInput.value = \"\";\n        showToast(jsonErrorMessage, 15000, toastTypes.ERROR);\n      } else {\n        getandSaveCSVdata(membersFile, studentsFile, function (paramsFilesCorrect) {\n          if (!paramsFilesCorrect) {\n            // reset all import files' inputs that potentially lead to error\n            var _paramsInput = document.getElementById(\"configAssocNewParams\");\n\n            _paramsInput.classList.add(\"is-invalid\");\n\n            document.querySelector(\"#\" + _paramsInput.id + \"Feedback\").style.display = \"block\";\n            _paramsInput.value = \"\"; // if there's an error with CSVs, not allow to submit the form\n\n            var membersInput = document.getElementById(\"configAssocMembers\");\n            membersInput.classList.add(\"is-invalid\");\n            document.querySelector(\"#\" + membersInput.id + \"Feedback\").style.display = \"block\";\n            membersInput.value = \"\";\n            var studentsInput = document.getElementById(\"configAssocStudents\");\n            studentsInput.classList.add(\"is-invalid\");\n            document.querySelector(\"#\" + studentsInput.id + \"Feedback\").style.display = \"block\";\n            studentsInput.value = \"\";\n            showToast(csvsErrorMessage, 15000, toastTypes.ERROR);\n          } else {\n            readAndCheckRolesFile(rolesFile, function (rolesCorrect) {\n              if (!rolesCorrect) {\n                // reset all import files' inputs that potentially lead to error\n                // if there's an error with CSVs, not allow to submit the form\n                var _membersInput = document.getElementById(\"configAssocMembers\");\n\n                _membersInput.classList.add(\"is-invalid\");\n\n                document.querySelector(\"#\" + _membersInput.id + \"Feedback\").style.display = \"block\";\n                _membersInput.value = \"\";\n                var rolesInput = document.getElementById(\"configAssocCargos\");\n                rolesInput.classList.add(\"is-invalid\");\n                document.querySelector(\"#\" + rolesInput.id + \"Feedback\").style.display = \"block\";\n                rolesInput.value = \"\";\n                showToast(rolesErrorMessage, 15000, toastTypes.ERROR);\n              } else {\n                // uploads after files are validated\n                uploadAssocDataFiles(\"configAssocMembers\");\n                uploadAssocDataFiles(\"configAssocStudents\");\n                uploadAssocDataFiles(\"configAssocNewParams\"); //uploadAssocDataFiles(\"configAssocNewParams\");\n\n                var fileArray = document.getElementById(\"configAssocLogo\").files;\n\n                if (fileArray.length !== 0) {\n                  var file = fileArray[0]; // just one logo is uploaded\n\n                  var uploadTask = uploadNewLogo(file);\n                  uploadTask.on(\"state_changed\", function (snapshot) {\n                    // Observe state change events such as progress, pause, and resume\n                    // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n                    var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n                    console.log(\"Logo upload \" + progress + \"% completed\");\n\n                    switch (snapshot.state) {\n                      case firebase.storage.TaskState.PAUSED:\n                        // or 'paused'\n                        console.log(\"Logo upload on pause\");\n                        break;\n\n                      case firebase.storage.TaskState.RUNNING:\n                        // or 'running'\n                        console.log(\"Logo upload in progress\");\n                        break;\n                    }\n                  }, function (error) {\n                    console.log(\"Logo upload failed: \" + error);\n                    installGotErrors = true;\n                    showToast(uploadLogoError[languageCode], 5000, toastTypes.ERROR);\n                  }, function () {\n                    // Handle successful uploads on complete\n                    // get the download URL\n                    uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n                      continueInstallation(inputsInfo, downloadURL);\n                    });\n                  });\n                } else if (fileArray.length === 0) {\n                  // try to upload the file to firestore by its name\n                  var defaultLogoTask = uploadDefaultLogo();\n                  defaultLogoTask.then(function (downloadURL) {\n                    saveDefaultLogoURL(downloadURL);\n                    continueInstallation(inputsInfo, downloadURL);\n                  }).catch(function () {\n                    // alternatively, use asset file directly\n                    if (defaultLogoFile != null) {\n                      continueInstallation(inputsInfo, defaultLogoFile);\n                    } else {\n                      showToast(installDefaultLogoError[languageCode], 20000, toastTypes.ERROR);\n                    }\n                  });\n                }\n              }\n            });\n          }\n        });\n      }\n    });\n  } else {\n    showToast(requiredFieldsMissingMessage, 5000, toastTypes.ERROR);\n  }\n}\n\nfunction continueInstallation(inputsInfo, logoURL) {\n  if (installGotErrors) {\n    showToast(installError[languageCode], 5000, toastTypes.ERROR);\n    installGotErrors = false;\n    return;\n  }\n\n  var setupDataDoc = function setupDataDoc() {\n    var temp = {};\n\n    for (var label in inputsInfo) {\n      // default logo, when no one is provided\n      if (label === \"LogÃ³tipo\") {\n        temp[label] = logoURL;\n        continue;\n      }\n\n      temp[label] = inputsInfo[label].value;\n    }\n\n    temp[\"DeleteRegistosSemPagar\"] = \"7\";\n    return temp;\n  };\n\n  var dataDoc = setupDataDoc(); // {\"label\" : \"input value\"}\n  // send email to all imported parents\n\n  console.log(\"dataDoc before install -> \" + JSON.stringify(dataDoc));\n  var docRef = firestore.doc(\"initialConfigs/parameters\");\n  docRef.set(dataDoc).then(function () {\n    // ------------- installation control doc\n    var doc = {\n      installation: true\n    };\n    initDoc.set(doc).then(function () {\n      notifyAllParents();\n      alert(sucessImportMessage); // alert to block the page\n      //showToast(sucessImportMessage, 5000, toastTypes.SUCCESS);\n\n      window.location.href = \"/\";\n    }).catch(function (error) {\n      alert(\"Erro: \" + error);\n    });\n  }).catch(function (error) {\n    alert(\"Erro: \" + error);\n  });\n}\n\nexport { install, saveRegistToDB, saveCaseToDB, getGravatarURL // functions reused in installation of a brand new association\n, getAndSaveJSONparamsData, sendImportEmailToParent, uploadDefaultLogo, uploadNewLogo, uploadAssocDataFiles, removeAllInvalidFeedbacks, validZip, showZipWarning, validEmail, showEmailWarning, generateNewAssocNumber, fetchAssocNumbers // functions used in tests\n, checkJSONparamsEntitiesAndTypes, compareCSVandJsonParameters, getandSaveCSVdata, readAndCheckRolesFile, validateRolesJSON, setupCSVData };","map":{"version":3,"sources":["C:/Users/User/Desktop/Ambiente de Trabalho/Universidade/Ano 3/Semestre 2/PI/Projeto/repos/pi-assoc-pais/develop/src/firebase_scripts/installation.js"],"names":["firestore","storageRef","initDoc","firebaseConfig","firebase","getGravatarURL","defaultLogoFile","newParametersTypes","languageCode","newParametersEntities","membersImportFileNewParametersStartIndex","studentsImportFileNewParametersStartIndex","membersCSVparamsIndexes","studentsCSVparamsIndexes","studentsParameters","parentsParameters","notAvailableDesignation","zipCodeRegexes","defaultAvatar","showToast","toastTypes","emailRegex","cargoDocKey","deletedAtribute","validatedAtribute","blockedAtribute","roleAdminPermissionDesignation","jsonParamsErrorMessage","jsonOrCsvParamsErrorMessage","importSucessMessage","provideRequiredFieldsMessage","invalidZipMessage","registationSuccess","registationError","addCaseSucess","addCaseError","uploadLogoError","installError","invalidEmailMessage","rolesFileErrorMessage","installDefaultLogoError","jsonErrorMessage","csvsErrorMessage","sucessImportMessage","requiredFieldsMissingMessage","rolesErrorMessage","parentDesignation","parent","studentDesignation","student","NAdesignation","installGotErrors","membersEmails","membersDocsList","newParametersData","provided","params","membersFileHeaders","studentsFileHeaders","fetchAssocNumbers","project_id","projectId","uri","request","fetch","then","resp","json","data","console","log","JSON","stringify","assocNumbers","catch","error","generateNewAssocNumber","numbersArray","numbers","filter","el","map","x","Math","max","checkJSONparamsEntitiesAndTypes","entities","Object","keys","length","parentParams","studentParams","parentKeys","studentKeys","TEXT","INT","FLOAT","i","chave","getAndSaveJSONparamsData","jsonfile","callback","reader","FileReader","fileString","onloadend","result","jsonCorrect","parse","saveNewParamsFromJSONToDB","e","readAsText","paramsDoc","docRef","doc","set","saveRegistToDB","collection","parentRef","SUCCESS","ERROR","saveCaseToDB","ref","compareCSVandJsonParameters","jsonParams","csvParams","includes","areAllParametersSupported","paramsArray","supportedParams","push","trim","allNewParametersAreReallyNew","newParams","newParamName","toLowerCase","supportedParamName","getandSaveCSVdata","parentsFile","childrenFile","parentReader","childrenReader","parentFileString","childrenFileString","filesParamsCorrect","parentList","setupCSVData","childrenList","parentsExpectedHeaders","slice","studentsExpectedHeaders","parentsNewHeaders","studentsNewHeaders","saveParentsAndChildrenFromFileDatatoDB","parentsList","parentDocList","sort","a","b","parseInt","assoc_num_index","childrenDocList","parent_assoc_num_index","parentDoc","numSocio","nome","name_index","split","email","email_index","parentChildren","j","child","childDoc","PHOTO","CHILDREN","ADMIN","PAYED_FEE","FEES","REGISTER_DATE","Date","parents","allLines","item","headers","s","rowsData","lineDict","dadosLinha","toUpperCase","quotas_index","admin_index","readAndCheckRolesFile","rolesFile","rolesReader","rolesFileString","rolesFileCorrect","validateRolesJSON","rolesNum","role","roleDoc","roleDocKeys","permission","rolesList","r","duplicateFilteredRolesList","currentRole","parentsRolesAreValid","saveRolesInDB","setupTXTRoles","cargos","cargosNaLinha","concat","rolesArray","cargosRef","pos","cargo","cargoDoc","parentsDocList","parentsRolesValid","parentRole","ROLE","sendImportEmailToParent","tempEmail","window","localStorage","setItem","notifyAllParents","name","uploadDefaultLogo","defaultLogoFileParts","defaultLogoFileName","fileNameParts","ext","filename","getDownloadURL","uploadNewLogo","file","logoRef","put","saveDefaultLogoURL","url","defaultLogoRef","logoDoc","uploadAssocDataFiles","inputID","document","getElementById","files","snapshot","getFormElementsAndValues","all_labels","Array","from","querySelectorAll","all_inputs","querySelector","submittedInputs","label","input","labelText","innerText","labelHtmlFor","htmlFor","inputId","id","removeAllInvalidFeedbacks","feedbacks","inputs","style","display","classList","contains","remove","validZip","zipCodeValue","zipRegex","regex","zipLength","processedZip","test","showZipWarning","elementId","zipInput","add","validEmail","emailValue","emailReg","processedEmail","showEmailWarning","emailInput","install","requiredFieldsProvided","policyCheckboxChecked","inputsInfo","value","required","policyCheckbox","checked","zipValue","paramsJSONfile","membersFile","studentsFile","paramsInput","paramsFilesCorrect","membersInput","studentsInput","rolesCorrect","rolesInput","fileArray","uploadTask","on","progress","bytesTransferred","totalBytes","state","storage","TaskState","PAUSED","RUNNING","downloadURL","continueInstallation","defaultLogoTask","logoURL","setupDataDoc","temp","dataDoc","installation","alert","location","href"],"mappings":"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","sourcesContent":["import {\r\n  firestore,\r\n  storageRef,\r\n  initDoc,\r\n  firebaseConfig,\r\n} from \"../firebase-config\";\r\nimport firebase from \"firebase\";\r\n\r\nimport {\r\n  getGravatarURL,\r\n  defaultLogoFile,\r\n  newParametersTypes,\r\n  languageCode,\r\n  newParametersEntities,\r\n  membersImportFileNewParametersStartIndex,\r\n  studentsImportFileNewParametersStartIndex,\r\n  membersCSVparamsIndexes,\r\n  studentsCSVparamsIndexes,\r\n  studentsParameters,\r\n  parentsParameters,\r\n  notAvailableDesignation,\r\n  zipCodeRegexes,\r\n  defaultAvatar,\r\n  showToast,\r\n  toastTypes,\r\n  emailRegex,\r\n  cargoDocKey,\r\n  deletedAtribute,\r\n  validatedAtribute, blockedAtribute, roleAdminPermissionDesignation\r\n} from \"../utils/general_utils\";\r\nimport {\r\n  jsonParamsErrorMessage,\r\n  jsonOrCsvParamsErrorMessage,\r\n  importSucessMessage,\r\n  provideRequiredFieldsMessage,\r\n  invalidZipMessage,\r\n  registationSuccess,\r\n  registationError,\r\n  addCaseSucess,\r\n  addCaseError,\r\n  uploadLogoError,\r\n  installError,\r\n  invalidEmailMessage,\r\n  rolesFileErrorMessage, installDefaultLogoError\r\n} from \"../utils/messages_strings\";\r\nconst jsonErrorMessage = jsonParamsErrorMessage[languageCode];\r\nconst csvsErrorMessage = jsonOrCsvParamsErrorMessage[languageCode];\r\nconst sucessImportMessage = importSucessMessage[languageCode];\r\nconst requiredFieldsMissingMessage = provideRequiredFieldsMessage[languageCode];\r\nconst rolesErrorMessage = rolesFileErrorMessage[languageCode];\r\n\r\nconst parentDesignation = newParametersEntities.parent[languageCode];\r\nconst studentDesignation = newParametersEntities.student[languageCode];\r\nconst NAdesignation = notAvailableDesignation[languageCode];\r\n\r\nexport let installGotErrors = false;\r\n\r\n\r\nlet membersEmails = {};\r\nlet membersDocsList = []; // save members docs to check their roles later\r\n\r\nlet newParametersData = {\r\n  parent :\r\n    {\r\n      provided : false,\r\n      params : null\r\n    },\r\n\r\n  student :\r\n    {\r\n      provided : false,\r\n      params : null\r\n    }\r\n\r\n};\r\n\r\n// save parameters (which are the headers) from imported csv\r\nlet membersFileHeaders = [];\r\nlet studentsFileHeaders = [];\r\n\r\n/*\r\n* function to fetch existing associate numbers\r\n* */\r\nfunction fetchAssocNumbers() {\r\n\r\n  const project_id = firebaseConfig.projectId;\r\n  let uri =\r\n    \"https://us-central1-\" +\r\n    project_id +\r\n    \".cloudfunctions.net/api/getParentsNumeroSocio\";\r\n\r\n  //console.log(\"profile uri: \" + uri);\r\n\r\n  const request = async () => {\r\n    let assocNumbers;\r\n    await fetch(uri)\r\n      .then((resp) => resp.json()) // Transform the data into json\r\n      .then(function (data) {\r\n        console.log(\"assoc numbers recebidos -> \", JSON.stringify(data));\r\n        assocNumbers = data;\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n\r\n    return assocNumbers;\r\n  };\r\n\r\n  return request();\r\n\r\n}\r\n\r\n/*\r\n* function to get a new associate number (the associate numbers are incremental)\r\n* */\r\nfunction generateNewAssocNumber(numbersArray) {\r\n  // TODO: use Firebase Increment?\r\n  // remove empty strings, nulls and undefined and convert number strings to actual numbers\r\n  const numbers = numbersArray.filter(el=>el).map(x=>+x);\r\n  return Math.max(...numbers) + 1;\r\n}\r\n\r\n\r\n// ------------------------------------------------------------\r\n// NEW PARAMETERS\r\n\r\n\r\n/* function to check if the entities (parent and student) have the right designation\r\n* and if their parameters are supported (have also the right designation)\r\n* */\r\nfunction checkJSONparamsEntitiesAndTypes(json) {\r\n\r\n  // check entities\r\n  const entities = Object.keys(json).length;\r\n  //console.log(\"entities (\" + entities + \") -> \" + Object.keys(json));\r\n  const parentParams = json[parentDesignation];\r\n  const studentParams = json[studentDesignation];\r\n\r\n\r\n  if(entities === 1 && parentParams==null && studentParams==null){\r\n    /*\r\n    * with one entity, just one of them must be null;\r\n    * if none of them is parent or student: invalid JSON\r\n    * */\r\n    return false;\r\n  }\r\n  if(entities===2 && ((parentParams==null) || (studentParams==null))){\r\n    // if there are 2, but at least one of them is null: invalid JSON\r\n    return false;\r\n  }\r\n\r\n  //parentParams ? console.log(\"parentParams -> \" + JSON.stringify(parentParams)) : console.log(\"parentParams -> \" + parentParams);\r\n  //studentParams ? console.log(\"studentParams -> \" + JSON.stringify(studentParams)) : console.log(\"studentParams -> \" + studentParams);\r\n\r\n  if(entities === 0){ // allow no parameters, as the input field is required\r\n    return true;\r\n  }\r\n  else if(entities >=3){\r\n    // only 2 entities, at max (parent and student)\r\n    return false;\r\n  }\r\n  else if(1<=entities<=2) {\r\n    // check parameters themselves\r\n    let parentKeys;\r\n    let studentKeys;\r\n\r\n    if(parentParams)\r\n      parentKeys = Object.keys(parentParams);\r\n    if(studentParams)\r\n      studentKeys = Object.keys(studentParams);\r\n\r\n    //console.log(\"parentKeys: \" + parentKeys);\r\n    //console.log(\"studentKeys: \" + studentKeys);\r\n\r\n    /* if they exist, but have no parameters: JSON no accepted\r\n    *   - if the user does not want parameters for either\r\n    *     parent or student, simply does not write them in the JSON\r\n    * */\r\n    if(parentParams){\r\n      if(parentKeys.length === 0)\r\n        return false;\r\n    }\r\n    if(studentParams){\r\n      if(studentKeys.length === 0)\r\n        return false;\r\n    }\r\n    const TEXT = newParametersTypes.TEXT[languageCode];\r\n    const INT = newParametersTypes.INT[languageCode];\r\n    const FLOAT = newParametersTypes.FLOAT[languageCode];\r\n    //  check parent's parameters\r\n    if(parentParams){\r\n      if(parentKeys.length>0){\r\n        for (let i = 0; i< parentKeys.length; i++){\r\n          const chave = parentKeys[i];\r\n          //console.log(chave + \" : \" + parentParams[chave]);\r\n          // if none of supported parameters: invalid JSON\r\n          if(parentParams[chave]!==TEXT && parentParams[chave]!==INT && parentParams[chave]!==FLOAT){\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //  check student's parameters\r\n    if(studentParams){\r\n      if(studentKeys.length>0){\r\n        for (let i = 0; i< studentKeys.length; i++){\r\n          const chave = studentKeys[i];\r\n          //console.log(chave + \" : \" + studentParams[chave]);\r\n          // if none of supported parameters: invalid JSON\r\n          if(studentParams[chave]!==TEXT && studentParams[chave]!==INT && studentParams[chave]!==FLOAT){\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // save globally to check later against the CSV parameters\r\n  if(parentParams!=null){\r\n    newParametersData.parent.provided = true;\r\n    newParametersData.parent.params = parentParams;\r\n  }\r\n  if(studentParams!=null){\r\n    newParametersData.student.provided = true;\r\n    newParametersData.student.params = studentParams;\r\n  }\r\n\r\n  return true;\r\n\r\n}\r\n\r\nfunction getAndSaveJSONparamsData(jsonfile, callback) {\r\n  // callback will be the rest of the installation\r\n  let reader = new FileReader();\r\n  let fileString = \"NR\";\r\n\r\n  reader.onloadend = function () {\r\n    fileString = reader.result;\r\n    let jsonCorrect = false; // control if there were problems with JSON or not\r\n    try{\r\n      const json = JSON.parse(fileString);\r\n      jsonCorrect = true;\r\n      if(checkJSONparamsEntitiesAndTypes(json)){\r\n        jsonCorrect = true;\r\n        saveNewParamsFromJSONToDB(json);\r\n        callback(jsonCorrect);\r\n      }\r\n      else{\r\n        jsonCorrect = false;\r\n        callback(jsonCorrect);\r\n      }\r\n    }\r\n    catch (e) {\r\n      jsonCorrect = false;\r\n      callback(jsonCorrect);\r\n    }\r\n\r\n  };\r\n\r\n  reader.readAsText(jsonfile, \"UTF-8\");\r\n}\r\n\r\n/*\r\n * receives a JSON object and saves it to Firestore\r\n * */\r\nfunction saveNewParamsFromJSONToDB(json) {\r\n  const paramsDoc = json;\r\n  const docRef = firestore.doc(\"initialConfigs/newParameters\");\r\n  docRef\r\n    .set(paramsDoc)\r\n    .then(function () {\r\n      //console.log(\"Novos parÃ¢metros guardados com sucesso.\");\r\n    })\r\n    .catch(function (error) {\r\n      installGotErrors = true;\r\n    });\r\n}\r\n\r\nfunction saveRegistToDB(json) {\r\n  const docRef = firestore.collection(\"parents\");\r\n  const parentRef = docRef.doc(json[\"Email\"]);\r\n  parentRef\r\n    .set(json)\r\n    .then(function () {\r\n      showToast(registationSuccess[languageCode], 5000, toastTypes.SUCCESS);\r\n    })\r\n    .catch(function (error) {\r\n      console.log(\"regist save error: \" + JSON.stringify(error));\r\n      showToast(registationError[languageCode], 5000, toastTypes.ERROR);\r\n    });\r\n}\r\n\r\nfunction saveCaseToDB(json) {\r\n  //console.log(\"Json to save to DB -> \", JSON.stringify(json));\r\n\r\n  const docRef = firestore.collection(\"casos\");\r\n  const ref = docRef.doc();\r\n\r\n  ref\r\n    .set(json)\r\n    .then(function () {\r\n      showToast(addCaseSucess[languageCode], 5000, toastTypes.SUCCESS);\r\n    })\r\n    .catch(function (error) {\r\n      showToast(addCaseError[languageCode], 5000, toastTypes.ERROR);\r\n    });\r\n}\r\n\r\n// ------------------------------------------------------------\r\n// PROCESS CSV\r\n\r\n/*\r\n* function to check if the parameters provided in JSON are also\r\n* present in the concerning CSV file (parents and/or students) and vice-versa;\r\n* this receives and array of previously validated parameters from the JSON file\r\n* and also an array with the new parameters of CSV\r\n* */\r\nfunction compareCSVandJsonParameters(jsonParams, csvParams){\r\n\r\n  // check if both arrays have the same amount of parameters\r\n  if(jsonParams.length!==csvParams.length)\r\n    return false;\r\n\r\n  // if no parameters, then is valid\r\n  if(jsonParams.length===0 && csvParams.length===0)\r\n    return true;\r\n\r\n\r\n  // check if all parameters from JSON are also in the CSV\r\n  for(let i=0; i<jsonParams.length; i++){\r\n    if(!(csvParams.includes(jsonParams[i]))){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // check if all parameters from JSON are also in the CSV\r\n  for(let i=0; i<csvParams.length; i++){\r\n    if(!(jsonParams.includes(csvParams[i]))){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n\r\n/*\r\n* function for, given a list of parameters from CSV, checks if\r\n* they are all expected/suported by our platform;\r\n* the parent argument (boolean) specifies if we are evaluating\r\n* the parent parameters or not (the students)\r\n* */\r\nfunction areAllParametersSupported(paramsArray, parent) {\r\n\r\n    let supportedParams = [];\r\n    if(parent){\r\n      for(let x in parentsParameters){\r\n        supportedParams.push(parentsParameters[x][languageCode]);\r\n      }\r\n    }\r\n    else{\r\n      for(let x in studentsParameters){\r\n        supportedParams.push(studentsParameters[x][languageCode]);\r\n      }\r\n    }\r\n\r\n    //console.log(\"paramsArray -> \" + paramsArray);\r\n    //console.log(\"supportedParams -> \" + supportedParams);\r\n\r\n    for(let i=0; i<paramsArray.length; i++){\r\n      if(!supportedParams.includes(paramsArray[i].trim())){\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n\r\n/*\r\n* function for, given a list of parameters from CSV, checks if\r\n* they are all really new and are not equal (in their name)\r\n* to the parameters that our plataform already supports\r\n* */\r\nfunction allNewParametersAreReallyNew(supportedParams, newParams) {\r\n\r\n  if(newParams.length===0){\r\n    return true; // if no new parameters, so this must pass\r\n  }\r\n\r\n  for(let i=0; i<newParams.length; i++){\r\n    for(let x = 0; x<supportedParams.length; x++){\r\n      // compare the names in the same conditions\r\n      const newParamName = newParams[i].trim().toLowerCase();\r\n      const supportedParamName = supportedParams[x].trim().toLowerCase();\r\n\r\n      if(newParamName===supportedParamName)\r\n        return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n\r\n/*\r\n * function to process CSV with members and students' data:\r\n *  extract the headers an analyse each line\r\n *    - result for each line: { \"header1\" : data1, \"header2\" : data2, ...}\r\n * */\r\nfunction getandSaveCSVdata(parentsFile, childrenFile, callback) {\r\n  const parentReader = new FileReader();\r\n  const childrenReader = new FileReader();\r\n  let parentFileString = \"NR\";\r\n  let childrenFileString = \"NR\";\r\n\r\n  let filesParamsCorrect = false; // control the parameters validation between JSON and CSV\r\n\r\n  parentReader.onloadend = function () {\r\n    parentFileString = parentReader.result;\r\n    try{\r\n\r\n      // if there's no information in the file, it's invalid\r\n      if(parentFileString.trim().length===0){\r\n        throw \"Too few data in CSV file to process\";\r\n      }\r\n\r\n      const parentList = setupCSVData(parentFileString, true);\r\n\r\n      childrenReader.onloadend = function () {\r\n        childrenFileString = childrenReader.result;\r\n\r\n        try{\r\n\r\n          // if there's no information in the file, it's invalid\r\n          if(childrenFileString.trim().length===0){\r\n            throw \"Too few data in CSV file to process\";\r\n          }\r\n\r\n          const childrenList = setupCSVData(childrenFileString, false);\r\n\r\n          // check if expected parameters are with the supported name for language\r\n          // get only the parameters from CSV that we are expecting and check if we support them\r\n          const parentsExpectedHeaders = membersFileHeaders.slice(0, membersImportFileNewParametersStartIndex);\r\n          const studentsExpectedHeaders = studentsFileHeaders.slice(0,studentsImportFileNewParametersStartIndex);\r\n\r\n          if(!areAllParametersSupported(parentsExpectedHeaders, true) || !areAllParametersSupported(studentsExpectedHeaders, false)){\r\n            filesParamsCorrect = false;\r\n            callback(filesParamsCorrect);\r\n            return;\r\n          }\r\n\r\n\r\n          let parentParams = [];\r\n          let studentParams = [];\r\n          if(newParametersData.parent.provided)\r\n            parentParams = Object.keys(newParametersData.parent.params);\r\n          if(newParametersData.student.provided)\r\n            studentParams = Object.keys(newParametersData.student.params);\r\n\r\n          //console.log(\"parentParams: \" + parentParams);\r\n          //console.log(\"studentParams: \" + studentParams);\r\n\r\n          // get only the headers with the new parameters\r\n          const parentsNewHeaders = membersFileHeaders.slice(membersImportFileNewParametersStartIndex);\r\n          const studentsNewHeaders = studentsFileHeaders.slice(studentsImportFileNewParametersStartIndex);\r\n\r\n\r\n          if( !allNewParametersAreReallyNew(parentsExpectedHeaders, parentsNewHeaders) ||\r\n              !allNewParametersAreReallyNew(studentsExpectedHeaders, studentsNewHeaders))\r\n          {\r\n            filesParamsCorrect = false;\r\n            callback(filesParamsCorrect);\r\n            return;\r\n          }\r\n\r\n          //console.log(\"parentsNewHeaders: \" + parentsNewHeaders);\r\n          //console.log(\"studentsNewHeaders: \" + studentsNewHeaders);\r\n\r\n          if(compareCSVandJsonParameters(parentParams, parentsNewHeaders)\r\n            && compareCSVandJsonParameters(studentParams, studentsNewHeaders)){\r\n            filesParamsCorrect = true;\r\n            saveParentsAndChildrenFromFileDatatoDB(parentList, childrenList);\r\n            callback(filesParamsCorrect);\r\n          }\r\n          else{\r\n            filesParamsCorrect = false;\r\n            callback(filesParamsCorrect);\r\n          }\r\n        }\r\n        catch (e) {\r\n          // catch error if the CSV is improperly formatted, for example\r\n          filesParamsCorrect = false;\r\n          callback(filesParamsCorrect);\r\n        }\r\n\r\n\r\n      };\r\n    }\r\n    catch (e) {\r\n      // catch error if the CSV is improperly formatted, for example\r\n      filesParamsCorrect = false;\r\n      callback(filesParamsCorrect);\r\n    }\r\n  };\r\n\r\n  parentReader.readAsText(parentsFile, \"UTF-8\");\r\n  childrenReader.readAsText(childrenFile, \"UTF-8\");\r\n}\r\n\r\n/*\r\n * analyse processed CSV data and saves it in Firestore\r\n *   -  for each parent, will check the students with the corresponding\r\n *      associate number and add that students documents in the array\r\n *      of children of that parent document\r\n *   -  finally, the parent document (with its children) will be saved\r\n *      in Firestore\r\n * */\r\nfunction saveParentsAndChildrenFromFileDatatoDB(parentsList, childrenList) {\r\n  // parents and children list ordered by associate number\r\n  const parentDocList = parentsList.sort((a, b) =>\r\n    parseInt(a[Object.keys(a)[membersCSVparamsIndexes.assoc_num_index]]) > parseInt(b[Object.keys(b)[membersCSVparamsIndexes.assoc_num_index]]) ? 1 : -1\r\n  );\r\n\r\n  const childrenDocList = childrenList.sort((a, b) =>\r\n    parseInt(a[Object.keys(a)[studentsCSVparamsIndexes.parent_assoc_num_index]]) > parseInt(b[Object.keys(b)[studentsCSVparamsIndexes.parent_assoc_num_index]]) ? 1 : -1\r\n  );\r\n\r\n  //console.log(\"parentDocList -> \", parentDocList);\r\n  //console.log(\"childrenDocList -> \", childrenDocList);\r\n\r\n  const docRef = firestore.collection(\"parents\");\r\n\r\n  // add each to parent the students with the same parent's associate number\r\n  for (let i = 0; i < parentDocList.length; i++) {\r\n    let parentDoc = parentDocList[i];\r\n    const numSocio = parentDoc[Object.keys(parentDoc)[membersCSVparamsIndexes.assoc_num_index]];\r\n\r\n    const nome = parentDoc[Object.keys(parentDoc)[membersCSVparamsIndexes.name_index]].split(\" \")[0]; // first name\r\n    const email = parentDoc[Object.keys(parentDoc)[membersCSVparamsIndexes.email_index]];\r\n    membersEmails[nome] = email; // get name and email to send email afterwards\r\n\r\n    let parentChildren = []; // childrens of the current parent\r\n\r\n    // search for children with the same parent's associate number as above\r\n    for (let j = 0; j < childrenDocList.length; j++) {\r\n      const child = childrenDocList[j];\r\n      if (numSocio !== child[Object.keys(child)[studentsCSVparamsIndexes.parent_assoc_num_index]])\r\n        // if associate number is not equal, then this is not child of the current parent\r\n        continue;\r\n\r\n      let childDoc = child;\r\n\r\n\r\n      // remove associate number and parent's name from child's document, as\r\n      // it will be inside its parent documento\r\n      delete childDoc[Object.keys(childDoc)[0]];// TODO: check this index\r\n      delete childDoc[Object.keys(childDoc)[0]]; // remove 0 because the element at 1 shifted to 0 in the line above\r\n\r\n      childDoc[studentsParameters.PHOTO[languageCode]] = defaultAvatar;\r\n      childDoc[deletedAtribute] = false;\r\n\r\n      parentChildren.push(childDoc);\r\n    }\r\n\r\n    parentDoc[deletedAtribute] = false;\r\n\r\n    // add children document array to parent's documento\r\n    parentDoc[parentsParameters.CHILDREN[languageCode]] = parentChildren;\r\n\r\n    // convert admin boolean from CSV from string to boolean\r\n    parentDoc[parentsParameters.ADMIN[languageCode]] = parentDoc[parentsParameters.ADMIN[languageCode]] === \"true\";\r\n    // convert dues payment boolean from CSV from string to boolean (if not available, it gets false as well)\r\n    parentDoc[parentsParameters.PAYED_FEE[languageCode]] = parentDoc[parentsParameters.PAYED_FEE[languageCode]] === \"true\";\r\n\r\n    // add remaining necessary parameters\r\n    parentDoc[parentsParameters.FEES[languageCode]] = [];\r\n    //parentDoc[\"Data inscricao\"] = new Date().toJSON().split(\"T\")[0]; // get date on format: 2015-03-25\r\n    parentDoc[parentsParameters.REGISTER_DATE[languageCode]] = new Date();\r\n    // only regulars with payed dues are validated (admins are always valid)\r\n    parentDoc[validatedAtribute] = !(!parentDoc[parentsParameters.ADMIN[languageCode]] && !parentDoc[parentsParameters.PAYED_FEE[languageCode]]);\r\n    parentDoc[blockedAtribute] = false; // imported parents are not blocked initially\r\n\r\n    // avatar\r\n    parentDoc[parentsParameters.PHOTO[languageCode]] = getGravatarURL(email);\r\n\r\n    const parentRef = docRef.doc(email); // email as document id\r\n\r\n    parentRef\r\n      .set(parentDoc)\r\n      .then(function () {\r\n        //console.log(\"EE e educandos guardados com sucesso.\");\r\n      })\r\n      .catch(function (error) {\r\n        installGotErrors = true;\r\n      });\r\n  }\r\n}\r\n\r\n/*\r\n* function to read and format data from CSV in an array of dictionaries;\r\n* receives the file as a string and a boolean to indicate it's reading\r\n* the parents' CSV or the students'\r\n* */\r\nfunction setupCSVData(fileString, parents) {\r\n  const allLines = fileString.split(/\\r\\n|\\n/).filter((item) => item); // remove empty strings\r\n  //console.log(\"allLines -> \", allLines);\r\n\r\n  // if there's no information in the file, it's invalid\r\n  if(allLines.length<=1){\r\n    console.log(\"sem dados nas linhas\");\r\n    throw \"Too few data in CSV file to process\"\r\n  }\r\n\r\n  // remove empty strings and trailing spaces\r\n  const headers = allLines[0].split(/[,;]+/).filter((item) => item).map(s => s.trim());\r\n\r\n  // save this headers (which represent parameters) globally\r\n  if(parents)\r\n    membersFileHeaders = headers;\r\n  else studentsFileHeaders = headers;\r\n  // ---------------------------------------------------------------\r\n\r\n  let rowsData = [];\r\n\r\n  //console.log(\"headers -> \", headers);\r\n\r\n  for (let i = 1; i < allLines.length; i++) {\r\n    let lineDict = {};\r\n\r\n    // remove empty strings and trailing spaces\r\n    let dadosLinha = allLines[i].split(/[,;]+/).filter((item) => item).map(s => s.trim());\r\n\r\n    //console.log(\"dadosLinha atual -> \", dadosLinha);\r\n    //console.log(\"dadosLinha length -> \", dadosLinha.length);\r\n    //console.log(\"headers length -> \", headers.length);\r\n\r\n    // if there's more data than corresponding headers; CSV not valid\r\n    if(dadosLinha.length !== headers.length){\r\n      // eslint-disable-next-line no-throw-literal\r\n      throw 'CSV headers and data in a line do not match';\r\n    }\r\n\r\n    dadosLinha = dadosLinha.map(function (item) { return item.toUpperCase() === NAdesignation ? NAdesignation : item });\r\n    // convert boolean strings to lower case\r\n    dadosLinha = dadosLinha.map(function (item) { return item.toLowerCase() === \"true\" ? \"true\" : item });\r\n    dadosLinha = dadosLinha.map(function (item) { return item.toLowerCase() === \"false\" ? \"false\" : item });\r\n\r\n    // check if boolean params in members csv are really booleans\r\n    if(parents){\r\n      if(dadosLinha[membersCSVparamsIndexes.quotas_index]!==\"true\" && dadosLinha[membersCSVparamsIndexes.quotas_index]!==\"false\"){\r\n        //console.log(\"Expected 'true' or 'false' in quotas column!\");\r\n        throw \"Expected 'true' or 'false' in quotas column!\";\r\n      }\r\n\r\n      if(dadosLinha[membersCSVparamsIndexes.admin_index]!==\"true\" && dadosLinha[membersCSVparamsIndexes.admin_index]!==\"false\"){\r\n        //console.log(\"Expected 'true' or 'false' in admin column!\");\r\n        throw \"Expected 'true' or 'false' in admin column!\";\r\n      }\r\n\r\n    }\r\n\r\n\r\n    //console.assert(dadosLinha.length === headers.length);\r\n\r\n    for (let j = 0; j < dadosLinha.length; j++) {\r\n      lineDict[headers[j]] = dadosLinha[j];\r\n    }\r\n\r\n    rowsData.push(lineDict);\r\n  }\r\n\r\n  // save parents globally to save their roles\r\n  if(parents)\r\n    membersDocsList = rowsData;\r\n\r\n  return rowsData;\r\n}\r\n\r\n// ------------------------------------------------------------\r\n// PROCESS ROLES\r\n\r\n/*\r\n * function to process TEXT with roles for the association's members:\r\n *  read the file, get a list of roles from it and check if the\r\n *  roles of the members from the CSV have a role from this TXT file\r\n * */\r\nfunction readAndCheckRolesFile(rolesFile, callback) {\r\n  const rolesReader = new FileReader();\r\n  let rolesFileString = \"NR\";\r\n\r\n  rolesReader.onloadend = function () {\r\n    rolesFileString = rolesReader.result;\r\n    let rolesFileCorrect = false; // control the correctness of roles file\r\n    try{\r\n      // try to parse the JSON file uploaded\r\n      const json = JSON.parse(rolesFileString);\r\n\r\n      validateRolesJSON(json, rolesFileString, callback);\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n      // catch error if the JSON is improperly formatted, for example\r\n      rolesFileCorrect = false;\r\n      callback(rolesFileCorrect);\r\n    }\r\n  };\r\n  rolesReader.readAsText(rolesFile, \"UTF-8\");\r\n}\r\n\r\nfunction validateRolesJSON(json, rolesFileString, callback) {\r\n  let rolesFileCorrect = false;\r\n  const rolesNum = Object.keys(json).length;\r\n  // if no roles provided, then do not accept the file\r\n  if(rolesNum===0){\r\n    throw \"No roles provided (roles file is an empty JSON)\";\r\n  }\r\n\r\n  for(let role in json){\r\n    const roleDoc = json[role];\r\n    const roleDocKeys = Object.keys(roleDoc);\r\n    // each role only has one permission (admin - yes or no)\r\n    if(roleDocKeys.length!==1){\r\n      throw \"Less or more than one permission provided for role <\" + role + \">\";\r\n    }\r\n    let permission = roleDoc[roleAdminPermissionDesignation];\r\n\r\n    // if no value for admin permission, file is invalid\r\n    if(permission==null){\r\n      throw \"No admin permission for role <\" + role + \">\";\r\n    }\r\n\r\n    // admin permission only has two values: true or false\r\n    if(permission!==\"false\" && permission!==\"true\"){\r\n      throw \"Invalid value for admin permission for role <\" + role + \">\";\r\n    }\r\n  }\r\n\r\n  // if there's no information in the file, it's invalid\r\n  if(rolesFileString.trim().length===0){\r\n    throw \"Too few data in ROLES file to process\";\r\n  }\r\n\r\n  // get roles from JSON as an array, removing spaces around\r\n  const rolesList = Object.keys(json).map(r => r.trim());\r\n\r\n  let duplicateFilteredRolesList = [];\r\n\r\n  for(let i in rolesList){\r\n    const currentRole = rolesList[i];\r\n    if(!duplicateFilteredRolesList.includes(currentRole)){\r\n      duplicateFilteredRolesList.push(currentRole);\r\n    }\r\n  }\r\n\r\n  if(rolesList.length!==duplicateFilteredRolesList.length){\r\n    throw \"There are duplicated roles in JSON\";\r\n  }\r\n\r\n  if(parentsRolesAreValid(rolesList, membersDocsList)){\r\n    rolesFileCorrect = true;\r\n    saveRolesInDB(rolesList, json);\r\n    callback(rolesFileCorrect);\r\n  }\r\n  else{\r\n    rolesFileCorrect = false;\r\n    callback(rolesFileCorrect);\r\n  }\r\n}\r\n\r\n/*\r\n * function to read the TEXT file with roles for the association's\r\n * members and get a list of roles from it\r\n * */\r\nexport function setupTXTRoles(fileString){\r\n  const allLines = fileString.split(/\\r\\n|\\n/).filter((item) => item); // remove empty strings\r\n\r\n  // if there's no information in the file, it's invalid\r\n  if(allLines.length===0){\r\n    throw \"Too few data in TXT file to process\"\r\n  }\r\n\r\n  let cargos = [];\r\n  for(let i = 0; i < allLines.length; i++){\r\n    let cargosNaLinha = allLines[i].split(/[,]+/).filter((item) => item).map(s => s.trim()); // remove empty strings and trailing spaces\r\n    cargos = cargos.concat(cargosNaLinha); // add this roles to the main array\r\n  }\r\n  return cargos;\r\n}\r\n\r\n/*\r\n * for each role imported, save it as a document in Firestore\r\n * - for each role: {\"titulo\" (from cargoDocKey constant) : <role_name>}\r\n * */\r\nexport function saveRolesInDB(rolesArray, json){\r\n  const cargosRef = firestore.collection(\"cargos\");\r\n  for(let pos in rolesArray){\r\n    const cargo = rolesArray[pos];\r\n    const permission = json[cargo][roleAdminPermissionDesignation] !== \"false\";\r\n\r\n    const cargoDoc = {\r\n      [cargoDocKey] : cargo,\r\n      [roleAdminPermissionDesignation] : permission\r\n    };\r\n    const docRef = cargosRef.doc(cargo);\r\n    docRef\r\n      .set(cargoDoc)\r\n      .then(function () {\r\n        //console.log(\"Cargo <\" + cargo + \"> guardado com sucesso.\");\r\n      })\r\n      .catch(function (error) {\r\n        //console.log(\"erro ao guardar cargo <\" + cargo + \">\");\r\n        installGotErrors = true;\r\n      });\r\n  }\r\n}\r\n\r\n/*\r\n * function to check if the roles of the members from the CSV\r\n * have a role from the TXT file provided with the association's roles\r\n * */\r\nfunction parentsRolesAreValid(rolesArray, parentsDocList){\r\n  let parentsRolesValid = true;\r\n  for(let pos in parentsDocList){\r\n    const parentDoc = parentsDocList[pos];\r\n    const parentRole = parentDoc[parentsParameters.ROLE[languageCode]];\r\n    if(!rolesArray.includes(parentRole)){\r\n      //console.log(\"json nÃ£o inclui <\" + parentRole + \">\");\r\n      parentsRolesValid = false;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return parentsRolesValid;\r\n}\r\n\r\n// --------- USER\r\n/*\r\n * send email to parent to notify it was imported to platform\r\n */\r\nasync function sendImportEmailToParent(nome, email) {\r\n  // TODO: remove this hardcoded email\r\n  const tempEmail = \"alexandrejflopes@ua.pt\";\r\n\r\n  const project_id = firebaseConfig.projectId;\r\n  let uri =\r\n    \"https://us-central1-\" +\r\n    project_id +\r\n    \".cloudfunctions.net/api/sendUserImportEmail?\" +\r\n    \"email=\" +\r\n    tempEmail +\r\n    \"&\" +\r\n    \"nome=\" +\r\n    nome;\r\n\r\n  window.localStorage.setItem(\"emailForSignIn\", tempEmail);\r\n\r\n  const request = async () => {\r\n    await fetch(uri)\r\n      .then()\r\n      .catch(function (error) {\r\n        console.log(\"Error sending import email: \" + error);\r\n      });\r\n  };\r\n\r\n  return request();\r\n}\r\n\r\n\r\nfunction notifyAllParents() {\r\n  for (let name in membersEmails) {\r\n    const email = membersEmails[name];\r\n    //console.log(name + \" : \" + email);\r\n    sendImportEmailToParent(name, email).then();\r\n  }\r\n}\r\n\r\n\r\n// --------- upload logos ---------\r\n\r\nfunction uploadDefaultLogo() {\r\n  // if no logo is provided, consider the default\r\n  const defaultLogoFileParts = defaultLogoFile.split(\"/\");\r\n  const defaultLogoFileName =\r\n    defaultLogoFileParts[defaultLogoFileParts.length - 1];\r\n  // get just name and extension (because the name above was like 'name.<some_numbers>.<extension>'....\r\n  const fileNameParts = defaultLogoFileName.split(\".\");\r\n  const nome = fileNameParts[0];\r\n  const ext = fileNameParts[fileNameParts.length - 1];\r\n  const filename = nome + \".\" + ext;\r\n  return storageRef.child(\"logo/default/\" + filename).getDownloadURL();\r\n}\r\n\r\nfunction uploadNewLogo(file) {\r\n  const logoRef = storageRef.child(\"logo/\" + file.name);\r\n  return logoRef.put(file);\r\n}\r\n\r\nexport function saveDefaultLogoURL(url) {\r\n  const defaultLogoRef = firestore.collection(\"initialConfigs\");\r\n  const logoDoc = {\"url\" : url};\r\n  const docRef = defaultLogoRef.doc(\"defaultLogo\");\r\n  docRef\r\n    .set(logoDoc)\r\n    .then(function () {\r\n      console.log(\"defaultLogo guardado com sucesso.\");\r\n    })\r\n    .catch(function () {\r\n      console.log(\"erro ao guardar defaultLogo na BD\");\r\n      installGotErrors = true;\r\n    });\r\n\r\n}\r\n\r\n// --------------------------------\r\n\r\n/*\r\n* receives the HTML input id and upload the file it holds\r\n* */\r\nfunction uploadAssocDataFiles(inputID) {\r\n  const file = document.getElementById(inputID).files[0];\r\n\r\n  storageRef\r\n    .child(\"assoc_config_files/\" + file.name)\r\n    .put(file)\r\n    .then(function (snapshot) {\r\n      //alert(\"Uploaded a blob or file!\");\r\n    })\r\n    .catch(function (error) {\r\n      installGotErrors = true;\r\n    });\r\n}\r\n\r\nfunction getFormElementsAndValues() {\r\n  const all_labels = Array.from(document.querySelectorAll(\"label\"));\r\n  let all_inputs = Array.from(document.querySelectorAll(\"input\"));\r\n  all_inputs.push(document.querySelector(\"#configAssocDescricao\")); // add description textarea\r\n\r\n  let submittedInputs = {};\r\n\r\n  for (let i = 0; i < all_labels.length; i++) {\r\n    for (let j = 0; j < all_inputs.length; j++) {\r\n      const label = all_labels[i];\r\n      const input = all_inputs[j];\r\n\r\n      let labelText = label.innerText;\r\n      let labelHtmlFor = label.htmlFor;\r\n      let inputId = input.id;\r\n\r\n      if (labelHtmlFor === inputId) {\r\n        if (labelText.includes(\"(\") || labelText.includes(\"/\")) {\r\n          if(labelText.trim()===\"Valor da Quota (â¬)\"){\r\n            labelText = \"Quota\";\r\n          }\r\n          else{\r\n            labelText = labelText.split(\" \")[0];\r\n          }\r\n        }\r\n        submittedInputs[labelText] = input;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return submittedInputs;\r\n}\r\n\r\nfunction removeAllInvalidFeedbacks() {\r\n  const feedbacks = Array.from(document.querySelectorAll(\".invalid-feedback\"));\r\n  const inputs = Array.from(document.querySelectorAll(\"input\"));\r\n\r\n  for (let i = 0; i < feedbacks.length; i++) {\r\n    feedbacks[i].style.display = \"none\";\r\n  }\r\n\r\n  for (let i = 0; i < inputs.length; i++) {\r\n    if (inputs[i].classList.contains(\"is-invalid\")) {\r\n      inputs[i].classList.remove(\"is-invalid\");\r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction validZip(zipCodeValue) {\r\n    const zipRegex = zipCodeRegexes[languageCode].regex;\r\n    const zipLength = zipCodeRegexes[languageCode].length;\r\n    if(zipCodeValue.trim().length!==zipLength)\r\n      return false;\r\n    const processedZip = zipCodeValue.trim().slice(0,zipLength);\r\n    return zipRegex.test(processedZip);\r\n}\r\n\r\nfunction showZipWarning(elementId) {\r\n  // if there's an error with zip code, not allow to submit the form and show warning\r\n  const zipInput = document.getElementById(elementId);\r\n  zipInput.classList.add(\"is-invalid\");\r\n  document.querySelector(\"#\" + zipInput.id + \"Feedback\").style.display =\r\n    \"block\";\r\n  //zipInput.value = \"\";\r\n  showToast(invalidZipMessage[languageCode], 5000, toastTypes.ERROR);\r\n}\r\n\r\nfunction validEmail(emailValue) {\r\n  const emailReg = emailRegex;\r\n  const processedEmail = emailValue.trim();\r\n  return emailReg.test(processedEmail);\r\n}\r\n\r\nfunction showEmailWarning(elementId) {\r\n  // if there's an error with zip code, not allow to submit the form and show warning\r\n  const emailInput = document.getElementById(elementId);\r\n  emailInput.classList.add(\"is-invalid\");\r\n  document.querySelector(\"#\" + emailInput.id + \"Feedback\").style.display =\r\n    \"block\";\r\n  showToast(invalidEmailMessage[languageCode], 5000, toastTypes.ERROR);\r\n}\r\n\r\n\r\nfunction install() {\r\n  removeAllInvalidFeedbacks();\r\n  let requiredFieldsProvided = true;\r\n  let policyCheckboxChecked = true;\r\n  const inputsInfo = getFormElementsAndValues(); // { \"labelText\" : input }\r\n\r\n  //console.log(\"inputsInfo v \");\r\n  //console.log(inputsInfo);\r\n\r\n  for (const label in inputsInfo) {\r\n    //console.log(\"label -> \" + label);\r\n    let input = inputsInfo[label];\r\n    //console.log(\"input v \");\r\n    //console.log(input);\r\n    if (input.value === \"\" && input.required) {\r\n      input.classList.add(\"is-invalid\");\r\n      document.querySelector(\"#\" + input.id + \"Feedback\").style.display =\r\n        \"block\";\r\n      requiredFieldsProvided = false; // if there's an empty required input, no submit\r\n      //break;\r\n    }\r\n  }\r\n\r\n  // verify the checkBox\r\n  const policyCheckbox = document.querySelector(\"input[type=checkbox]\");\r\n  if (!policyCheckbox.checked) {\r\n    policyCheckboxChecked = false;\r\n    document.querySelector(\"#\" + policyCheckbox.id + \"Feedback\").style.display =\r\n      \"block\";\r\n  }\r\n\r\n  //------------------------\r\n\r\n  /*const setupDataDocTest = () => {\r\n    let temp = {};\r\n    for (const label in inputsInfo) {\r\n      temp[label] = inputsInfo[label].value;\r\n    }\r\n\r\n    return temp;\r\n  };\r\n\r\n  const dataDocTest = setupDataDocTest();\r\n  console.log(\"dataDocTest -> \", dataDocTest);*/\r\n\r\n  //-------------------------\r\n\r\n  if (requiredFieldsProvided && policyCheckboxChecked) {\r\n\r\n    // validate the zip code for the country\r\n    const zipValue = document.getElementById(\"configAssocZip\").value;\r\n    if(!validZip(zipValue)){\r\n      showZipWarning(\"configAssocZip\");\r\n      return;\r\n    }\r\n\r\n    const emailValue = document.getElementById(\"configAssocEmail\").value;\r\n    if(!validEmail(emailValue)){\r\n      showEmailWarning(\"configAssocEmail\");\r\n      return;\r\n    }\r\n\r\n    // read files and save their data\r\n    const paramsJSONfile = document.getElementById(\"configAssocNewParams\")\r\n      .files[0];\r\n    const membersFile = document.getElementById(\"configAssocMembers\").files[0];\r\n    const studentsFile = document.getElementById(\"configAssocStudents\").files[0];\r\n    const rolesFile = document.getElementById(\"configAssocCargos\").files[0];\r\n\r\n    getAndSaveJSONparamsData(paramsJSONfile, function (jsonCorrect) {\r\n      if(!jsonCorrect){\r\n        // if there's an error with JSON, not allow to submit the form\r\n        const paramsInput = document.getElementById(\"configAssocNewParams\");\r\n        paramsInput.classList.add(\"is-invalid\");\r\n        document.querySelector(\"#\" + paramsInput.id + \"Feedback\").style.display =\r\n          \"block\";\r\n        paramsInput.value = \"\";\r\n        showToast(jsonErrorMessage, 15000, toastTypes.ERROR);\r\n      }\r\n      else{\r\n        getandSaveCSVdata(membersFile, studentsFile, function (paramsFilesCorrect) {\r\n\r\n          if(!paramsFilesCorrect){\r\n            // reset all import files' inputs that potentially lead to error\r\n            const paramsInput = document.getElementById(\"configAssocNewParams\");\r\n            paramsInput.classList.add(\"is-invalid\");\r\n            document.querySelector(\"#\" + paramsInput.id + \"Feedback\").style.display =\r\n              \"block\";\r\n            paramsInput.value = \"\";\r\n\r\n            // if there's an error with CSVs, not allow to submit the form\r\n            const membersInput = document.getElementById(\"configAssocMembers\");\r\n            membersInput.classList.add(\"is-invalid\");\r\n            document.querySelector(\"#\" + membersInput.id + \"Feedback\").style.display =\r\n              \"block\";\r\n            membersInput.value = \"\";\r\n\r\n\r\n            const studentsInput = document.getElementById(\"configAssocStudents\");\r\n            studentsInput.classList.add(\"is-invalid\");\r\n            document.querySelector(\"#\" + studentsInput.id + \"Feedback\").style.display =\r\n              \"block\";\r\n            studentsInput.value = \"\";\r\n            showToast(csvsErrorMessage, 15000, toastTypes.ERROR);\r\n          }\r\n\r\n          else{\r\n\r\n            readAndCheckRolesFile(rolesFile, function (rolesCorrect) {\r\n\r\n              if(!rolesCorrect){\r\n                // reset all import files' inputs that potentially lead to error\r\n\r\n                // if there's an error with CSVs, not allow to submit the form\r\n                const membersInput = document.getElementById(\"configAssocMembers\");\r\n                membersInput.classList.add(\"is-invalid\");\r\n                document.querySelector(\"#\" + membersInput.id + \"Feedback\").style.display =\r\n                  \"block\";\r\n                membersInput.value = \"\";\r\n\r\n\r\n                const rolesInput = document.getElementById(\"configAssocCargos\");\r\n                rolesInput.classList.add(\"is-invalid\");\r\n                document.querySelector(\"#\" + rolesInput.id + \"Feedback\").style.display =\r\n                  \"block\";\r\n                rolesInput.value = \"\";\r\n\r\n                showToast(rolesErrorMessage, 15000, toastTypes.ERROR);\r\n              }\r\n              else{\r\n                // uploads after files are validated\r\n                uploadAssocDataFiles(\"configAssocMembers\");\r\n                uploadAssocDataFiles(\"configAssocStudents\");\r\n                uploadAssocDataFiles(\"configAssocNewParams\");\r\n                //uploadAssocDataFiles(\"configAssocNewParams\");\r\n\r\n                const fileArray = document.getElementById(\"configAssocLogo\").files;\r\n\r\n                if (fileArray.length !== 0) {\r\n                  const file = fileArray[0]; // just one logo is uploaded\r\n                  const uploadTask = uploadNewLogo(file);\r\n                  uploadTask.on(\r\n                    \"state_changed\",\r\n                    function (snapshot) {\r\n                      // Observe state change events such as progress, pause, and resume\r\n                      // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n                      var progress =\r\n                        (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                      console.log(\"Logo upload \" + progress + \"% completed\");\r\n                      switch (snapshot.state) {\r\n                        case firebase.storage.TaskState.PAUSED: // or 'paused'\r\n                          console.log(\"Logo upload on pause\");\r\n                          break;\r\n                        case firebase.storage.TaskState.RUNNING: // or 'running'\r\n                          console.log(\"Logo upload in progress\");\r\n                          break;\r\n                      }\r\n                    },\r\n                    function (error) {\r\n                      console.log(\"Logo upload failed: \" + error);\r\n                      installGotErrors = true;\r\n                      showToast(uploadLogoError[languageCode], 5000, toastTypes.ERROR);\r\n                    },\r\n                    function () {\r\n                      // Handle successful uploads on complete\r\n                      // get the download URL\r\n                      uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n                        continueInstallation(inputsInfo, downloadURL);\r\n                      });\r\n                    }\r\n                  );\r\n                } else if (fileArray.length === 0) {\r\n                  // try to upload the file to firestore by its name\r\n                  const defaultLogoTask = uploadDefaultLogo();\r\n                  defaultLogoTask\r\n                    .then(function (downloadURL) {\r\n                      saveDefaultLogoURL(downloadURL);\r\n                    continueInstallation(inputsInfo, downloadURL);\r\n                  })\r\n                    .catch(() => {\r\n                      // alternatively, use asset file directly\r\n                      if(defaultLogoFile!=null){\r\n                        continueInstallation(inputsInfo, defaultLogoFile);\r\n                      }\r\n                      else{\r\n                        showToast(installDefaultLogoError[languageCode], 20000, toastTypes.ERROR);\r\n                      }\r\n                    });\r\n                }\r\n              }\r\n\r\n            })\r\n          }\r\n\r\n        });\r\n\r\n\r\n      }\r\n\r\n    });\r\n\r\n  } else {\r\n      showToast(requiredFieldsMissingMessage, 5000, toastTypes.ERROR);\r\n  }\r\n}\r\n\r\nfunction continueInstallation(inputsInfo, logoURL) {\r\n\r\n  if(installGotErrors){\r\n    showToast(installError[languageCode], 5000, toastTypes.ERROR);\r\n    installGotErrors = false;\r\n    return;\r\n  }\r\n\r\n  const setupDataDoc = () => {\r\n    let temp = {};\r\n    for (const label in inputsInfo) {\r\n      // default logo, when no one is provided\r\n      if (label === \"LogÃ³tipo\") {\r\n        temp[label] = logoURL;\r\n        continue;\r\n      }\r\n      temp[label] = inputsInfo[label].value;\r\n    }\r\n\r\n    temp[\"DeleteRegistosSemPagar\"] = \"7\";\r\n\r\n    return temp;\r\n  };\r\n\r\n  const dataDoc = setupDataDoc(); // {\"label\" : \"input value\"}\r\n  // send email to all imported parents\r\n  console.log(\"dataDoc before install -> \" + JSON.stringify(dataDoc));\r\n\r\n  const docRef = firestore.doc(\"initialConfigs/parameters\");\r\n\r\n  docRef\r\n    .set(dataDoc)\r\n    .then(function () {\r\n      // ------------- installation control doc\r\n      const doc = {\r\n        installation: true,\r\n      };\r\n\r\n      initDoc\r\n        .set(doc)\r\n        .then(function () {\r\n          notifyAllParents();\r\n          alert(sucessImportMessage); // alert to block the page\r\n          //showToast(sucessImportMessage, 5000, toastTypes.SUCCESS);\r\n          window.location.href = \"/\";\r\n        })\r\n        .catch(function (error) {\r\n          alert(\"Erro: \" + error);\r\n        });\r\n    })\r\n    .catch(function (error) {\r\n      alert(\"Erro: \" + error);\r\n    });\r\n}\r\n\r\nexport { install, saveRegistToDB, saveCaseToDB, getGravatarURL,\r\n        // functions reused in installation of a brand new association\r\n        getAndSaveJSONparamsData,\r\n        sendImportEmailToParent,\r\n        uploadDefaultLogo,\r\n        uploadNewLogo,\r\n        uploadAssocDataFiles,\r\n        removeAllInvalidFeedbacks,\r\n        validZip,\r\n        showZipWarning,\r\n        validEmail,\r\n        showEmailWarning,\r\n        generateNewAssocNumber,\r\n        fetchAssocNumbers,\r\n        // functions used in tests\r\n        checkJSONparamsEntitiesAndTypes,\r\n        compareCSVandJsonParameters,\r\n        getandSaveCSVdata,\r\n        readAndCheckRolesFile,\r\n        validateRolesJSON,\r\n        setupCSVData};\r\n"]},"metadata":{},"sourceType":"module"}